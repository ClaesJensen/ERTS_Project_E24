-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity biquadv2start is
generic (
    C_S_AXI_BIQUADV2_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_BIQUADV2_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outDataLeft_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    outDataLeft_V_ap_vld : OUT STD_LOGIC;
    outDataLeft_V_ap_ack : IN STD_LOGIC;
    outDataRight_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    outDataRight_V_ap_vld : OUT STD_LOGIC;
    outDataRight_V_ap_ack : IN STD_LOGIC;
    s_axi_biquadv2_AWVALID : IN STD_LOGIC;
    s_axi_biquadv2_AWREADY : OUT STD_LOGIC;
    s_axi_biquadv2_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_ADDR_WIDTH-1 downto 0);
    s_axi_biquadv2_WVALID : IN STD_LOGIC;
    s_axi_biquadv2_WREADY : OUT STD_LOGIC;
    s_axi_biquadv2_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_DATA_WIDTH-1 downto 0);
    s_axi_biquadv2_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_DATA_WIDTH/8-1 downto 0);
    s_axi_biquadv2_ARVALID : IN STD_LOGIC;
    s_axi_biquadv2_ARREADY : OUT STD_LOGIC;
    s_axi_biquadv2_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_ADDR_WIDTH-1 downto 0);
    s_axi_biquadv2_RVALID : OUT STD_LOGIC;
    s_axi_biquadv2_RREADY : IN STD_LOGIC;
    s_axi_biquadv2_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_DATA_WIDTH-1 downto 0);
    s_axi_biquadv2_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_biquadv2_BVALID : OUT STD_LOGIC;
    s_axi_biquadv2_BREADY : IN STD_LOGIC;
    s_axi_biquadv2_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of biquadv2start is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "biquadv2start,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.416000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=1662,HLS_SYN_LUT=1407}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal b0_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal b1_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal b2_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal a1_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal a2_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal inDataLeft_V : STD_LOGIC_VECTOR (23 downto 0);
    signal inDataRight_V : STD_LOGIC_VECTOR (23 downto 0);
    signal array_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_r_ce0 : STD_LOGIC;
    signal array_r_we0 : STD_LOGIC;
    signal array_r_d0 : STD_LOGIC_VECTOR (26 downto 0);
    signal array_r_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal array_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_r_ce1 : STD_LOGIC;
    signal array_r_we1 : STD_LOGIC;
    signal array_r_d1 : STD_LOGIC_VECTOR (26 downto 0);
    signal array_r_q1 : STD_LOGIC_VECTOR (26 downto 0);
    signal outDataLeft_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal outDataRight_V_blk_n : STD_LOGIC;
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal inDataRight_V_read_reg_863 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inDataLeft_V_read_reg_868 : STD_LOGIC_VECTOR (23 downto 0);
    signal a2_a0_V_read_reg_873 : STD_LOGIC_VECTOR (26 downto 0);
    signal a1_a0_V_read_reg_878 : STD_LOGIC_VECTOR (26 downto 0);
    signal b2_a0_V_read_reg_883 : STD_LOGIC_VECTOR (26 downto 0);
    signal inDataLeft_V_trunc_fu_305_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal inDataLeft_V_trunc_reg_888 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal inDataRight_V_trunc_fu_309_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal inDataRight_V_trunc_reg_893 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_V_fu_319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_901 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_3_cast_fu_330_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_cast_reg_906 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal array_load_4_reg_921 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_20_fu_345_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_reg_926 : STD_LOGIC_VECTOR (23 downto 0);
    signal OP1_V_fu_359_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal OP1_V_reg_936 : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal OP2_V_fu_363_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_26_fu_367_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_reg_946 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP2_V_1_fu_371_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_2_fu_387_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_2_reg_961 : STD_LOGIC_VECTOR (50 downto 0);
    signal signbit_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_422_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_4_reg_972 : STD_LOGIC_VECTOR (23 downto 0);
    signal newsignbit_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_reg_991 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_9_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_581_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_7_reg_1038 : STD_LOGIC_VECTOR (50 downto 0);
    signal signbit_1_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_616_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_9_reg_1049 : STD_LOGIC_VECTOR (23 downto 0);
    signal newsignbit_1_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_1_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_reg_1068 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal resultLeft_V_fu_701_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal resultLeft_V_reg_1085 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_38_i_i1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i1_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_1_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_1_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i1_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i1_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal resultRight_V_fu_813_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_4_fu_821_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_reg_1120 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_17_fu_825_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_reg_1125 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_838_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_reg_1130 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_19_fu_842_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_reg_1135 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_5_reg_242 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_reg_255 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_s_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr5_cast_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr1_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_outDataLeft_V_ap_ack : STD_LOGIC := '0';
    signal ap_sig_ioackin_outDataLeft_V_ap_ack : STD_LOGIC;
    signal ap_sig_ioackin_outDataRight_V_ap_ack : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_reg_ioackin_outDataRight_V_ap_ack : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal samples_V_load11_tru_fu_829_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_trunc_fu_833_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal samples_V_load_114_t_fu_846_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal samples_V_load_217_t_fu_850_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_5_trunc_fu_854_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal samples_V_load_320_t_fu_859_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_279_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_279_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal addr5_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal addr1_fu_349_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_375_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_cast_fu_383_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_3_fu_401_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_411_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_448_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_464_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_demorgan_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_569_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_13_cast_fu_577_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_8_fu_595_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_605_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_608_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_642_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_658_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_mux_fu_689_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_4_4_fu_695_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_31_fu_709_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i1_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_716_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i1_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_732_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_mux_fu_801_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_9_5_fu_807_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component biquadv2start_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component biquadv2start_arrbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (26 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (26 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component biquadv2start_biquadv2_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        b0_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        b1_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        b2_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        a1_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        a2_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        inDataLeft_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        inDataRight_V : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    array_r_U : component biquadv2start_arrbkb
    generic map (
        DataWidth => 27,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => array_r_address0,
        ce0 => array_r_ce0,
        we0 => array_r_we0,
        d0 => array_r_d0,
        q0 => array_r_q0,
        address1 => array_r_address1,
        ce1 => array_r_ce1,
        we1 => array_r_we1,
        d1 => array_r_d1,
        q1 => array_r_q1);

    biquadv2start_biquadv2_s_axi_U : component biquadv2start_biquadv2_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BIQUADV2_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BIQUADV2_DATA_WIDTH)
    port map (
        AWVALID => s_axi_biquadv2_AWVALID,
        AWREADY => s_axi_biquadv2_AWREADY,
        AWADDR => s_axi_biquadv2_AWADDR,
        WVALID => s_axi_biquadv2_WVALID,
        WREADY => s_axi_biquadv2_WREADY,
        WDATA => s_axi_biquadv2_WDATA,
        WSTRB => s_axi_biquadv2_WSTRB,
        ARVALID => s_axi_biquadv2_ARVALID,
        ARREADY => s_axi_biquadv2_ARREADY,
        ARADDR => s_axi_biquadv2_ARADDR,
        RVALID => s_axi_biquadv2_RVALID,
        RREADY => s_axi_biquadv2_RREADY,
        RDATA => s_axi_biquadv2_RDATA,
        RRESP => s_axi_biquadv2_RRESP,
        BVALID => s_axi_biquadv2_BVALID,
        BREADY => s_axi_biquadv2_BREADY,
        BRESP => s_axi_biquadv2_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        b0_a0_V => b0_a0_V,
        b1_a0_V => b1_a0_V,
        b2_a0_V => b2_a0_V,
        a1_a0_V => a1_a0_V,
        a2_a0_V => a2_a0_V,
        inDataLeft_V => inDataLeft_V,
        inDataRight_V => inDataRight_V);

    biquadv2start_mulcud_U0 : component biquadv2start_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 27,
        din1_WIDTH => 24,
        dout_WIDTH => 51)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_279_p0,
        din1 => grp_fu_279_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_outDataLeft_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outDataLeft_V_ap_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    if ((ap_block_state16_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_outDataLeft_V_ap_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = outDataLeft_V_ap_ack)) then 
                        ap_reg_ioackin_outDataLeft_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_outDataRight_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outDataRight_V_ap_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    if ((ap_block_state16_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_outDataRight_V_ap_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = outDataRight_V_ap_ack)) then 
                        ap_reg_ioackin_outDataRight_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_5_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_5_reg_242 <= resultRight_V_fu_813_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_5_reg_242 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_s_reg_255 <= resultLeft_V_reg_1085;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_255 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    p_s_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_s_reg_268 <= i_V_reg_901;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_s_reg_268 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                OP1_V_reg_936 <= OP1_V_fu_359_p1;
                tmp_26_reg_946 <= tmp_26_fu_367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Range1_all_ones_1_reg_1073 <= Range1_all_ones_1_fu_668_p2;
                Range1_all_zeros_1_reg_1080 <= Range1_all_zeros_1_fu_674_p2;
                Range2_all_ones_1_reg_1068 <= Range2_all_ones_1_fu_652_p2;
                brmerge40_demorgan_i_reg_1023 <= brmerge40_demorgan_i_fu_541_p2;
                brmerge_i_i_i_reg_1033 <= brmerge_i_i_i_fu_563_p2;
                carry_1_reg_1061 <= carry_1_fu_636_p2;
                newsignbit_1_reg_1055 <= p_Val2_9_fu_616_p2(23 downto 23);
                p_38_i_i_reg_1013 <= p_38_i_i_fu_515_p2;
                p_Val2_7_reg_1038 <= p_Val2_7_fu_581_p2;
                p_Val2_9_reg_1049 <= p_Val2_9_fu_616_p2;
                signbit_1_reg_1043 <= p_Val2_7_fu_581_p2(50 downto 50);
                tmp_9_reg_1018 <= tmp_9_fu_530_p2;
                underflow_reg_1028 <= underflow_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Range1_all_ones_reg_996 <= Range1_all_ones_fu_474_p2;
                Range1_all_zeros_reg_1003 <= Range1_all_zeros_fu_480_p2;
                Range2_all_ones_reg_991 <= Range2_all_ones_fu_458_p2;
                carry_reg_984 <= carry_fu_442_p2;
                newsignbit_reg_978 <= p_Val2_4_fu_422_p2(23 downto 23);
                p_Val2_2_reg_961 <= p_Val2_2_fu_387_p2;
                p_Val2_4_reg_972 <= p_Val2_4_fu_422_p2;
                signbit_reg_966 <= p_Val2_2_fu_387_p2(50 downto 50);
                tmp_28_reg_1008 <= grp_fu_279_p2(23 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a1_a0_V_read_reg_878 <= a1_a0_V;
                a2_a0_V_read_reg_873 <= a2_a0_V;
                b2_a0_V_read_reg_883 <= b2_a0_V;
                inDataLeft_V_read_reg_868 <= inDataLeft_V;
                inDataRight_V_read_reg_863 <= inDataRight_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                array_load_4_reg_921 <= array_r_q1;
                tmp_20_reg_926 <= tmp_20_fu_345_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                brmerge40_demorgan_i_1_reg_1100 <= brmerge40_demorgan_i_1_fu_764_p2;
                brmerge_i_i_i1_reg_1110 <= brmerge_i_i_i1_fu_786_p2;
                p_38_i_i1_reg_1090 <= p_38_i_i1_fu_738_p2;
                resultLeft_V_reg_1085 <= resultLeft_V_fu_701_p3;
                tmp_16_reg_1095 <= tmp_16_fu_753_p2;
                underflow_1_reg_1105 <= underflow_1_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_V_reg_901 <= i_V_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    inDataLeft_V_trunc_reg_888(23 downto 0) <= inDataLeft_V_trunc_fu_305_p1(23 downto 0);
                    inDataRight_V_trunc_reg_893(23 downto 0) <= inDataRight_V_trunc_fu_309_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_301 <= grp_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_17_reg_1125 <= tmp_17_fu_825_p1;
                tmp_4_reg_1120 <= tmp_4_fu_821_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_18_reg_1130 <= tmp_18_fu_838_p1;
                tmp_19_reg_1135 <= tmp_19_fu_842_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_22_reg_951 <= grp_fu_279_p2(23 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_0))) then
                    tmp_3_cast_reg_906(2 downto 0) <= tmp_3_cast_fu_330_p1(2 downto 0);
            end if;
        end if;
    end process;
    inDataLeft_V_trunc_reg_888(26 downto 24) <= "000";
    inDataRight_V_trunc_reg_893(26 downto 24) <= "000";
    tmp_3_cast_reg_906(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state16, ap_CS_fsm_state5, tmp_2_fu_313_p2, ap_block_state16_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_block_state16_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(array_load_4_reg_921),51));

        OP2_V_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_reg_946),51));

        OP2_V_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_reg_926),51));

    Range1_all_ones_1_fu_668_p2 <= "1" when (tmp_14_fu_658_p4 = ap_const_lv3_7) else "0";
    Range1_all_ones_fu_474_p2 <= "1" when (tmp_7_fu_464_p4 = ap_const_lv3_7) else "0";
    Range1_all_zeros_1_fu_674_p2 <= "1" when (tmp_14_fu_658_p4 = ap_const_lv3_0) else "0";
    Range1_all_zeros_fu_480_p2 <= "1" when (tmp_7_fu_464_p4 = ap_const_lv3_0) else "0";
    Range2_all_ones_1_fu_652_p2 <= "1" when (tmp_13_fu_642_p4 = ap_const_lv2_3) else "0";
    Range2_all_ones_fu_458_p2 <= "1" when (tmp_6_fu_448_p4 = ap_const_lv2_3) else "0";
    addr1_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr1_fu_349_p2),32));
    addr1_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv4_A) + unsigned(tmp_3_cast_reg_906));
    addr5_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr5_fu_334_p2),32));
    addr5_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) + unsigned(tmp_3_cast_fu_330_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_io_assign_proc : process(ap_sig_ioackin_outDataLeft_V_ap_ack, ap_sig_ioackin_outDataRight_V_ap_ack)
    begin
                ap_block_state16_io <= ((ap_const_logic_0 = ap_sig_ioackin_outDataLeft_V_ap_ack) or (ap_const_logic_0 = ap_sig_ioackin_outDataRight_V_ap_ack));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_outDataLeft_V_ap_ack_assign_proc : process(outDataLeft_V_ap_ack, ap_reg_ioackin_outDataLeft_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outDataLeft_V_ap_ack)) then 
            ap_sig_ioackin_outDataLeft_V_ap_ack <= outDataLeft_V_ap_ack;
        else 
            ap_sig_ioackin_outDataLeft_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_outDataRight_V_ap_ack_assign_proc : process(outDataRight_V_ap_ack, ap_reg_ioackin_outDataRight_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outDataRight_V_ap_ack)) then 
            ap_sig_ioackin_outDataRight_V_ap_ack <= outDataRight_V_ap_ack;
        else 
            ap_sig_ioackin_outDataRight_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;


    array_r_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_2_fu_313_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, addr5_cast_fu_340_p1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            array_r_address0 <= ap_const_lv4_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_address0 <= ap_const_lv4_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_address0 <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_address0 <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_address0 <= ap_const_lv4_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_1))) then 
            array_r_address0 <= ap_const_lv4_6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_0))) then 
            array_r_address0 <= addr5_cast_fu_340_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_address0 <= ap_const_lv4_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_address0 <= ap_const_lv4_0;
        else 
            array_r_address0 <= "XXXX";
        end if; 
    end process;


    array_r_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_2_fu_313_p2, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_3_fu_325_p1, addr1_cast_fu_354_p1, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_address1 <= ap_const_lv4_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_address1 <= ap_const_lv4_6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            array_r_address1 <= ap_const_lv4_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_r_address1 <= addr1_cast_fu_354_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_1)))) then 
            array_r_address1 <= ap_const_lv4_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_0))) then 
            array_r_address1 <= tmp_3_fu_325_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address1 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_address1 <= ap_const_lv4_1;
        else 
            array_r_address1 <= "XXXX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_2_fu_313_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state16_io, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_block_state16_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_2_fu_313_p2, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state16_io, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_block_state16_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_313_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            array_r_ce1 <= ap_const_logic_1;
        else 
            array_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_d0_assign_proc : process(b0_a0_V, ap_CS_fsm_state16, ap_CS_fsm_state1, a2_a0_V_read_reg_873, b2_a0_V_read_reg_883, ap_CS_fsm_state4, inDataRight_V_trunc_fu_309_p1, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3, samples_V_load11_tru_fu_829_p1, ap_CS_fsm_state15, samples_V_load_114_t_fu_846_p1, samples_V_load_217_t_fu_850_p1, ap_CS_fsm_state17, samples_V_load_320_t_fu_859_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            array_r_d0 <= samples_V_load_320_t_fu_859_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_d0 <= samples_V_load_217_t_fu_850_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_d0 <= samples_V_load_114_t_fu_846_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_d0 <= samples_V_load11_tru_fu_829_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_d0 <= inDataRight_V_trunc_fu_309_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_d0 <= a2_a0_V_read_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_d0 <= b2_a0_V_read_reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_d0 <= b0_a0_V;
        else 
            array_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_r_d1_assign_proc : process(b1_a0_V, ap_CS_fsm_state16, ap_CS_fsm_state1, a1_a0_V_read_reg_878, inDataLeft_V_trunc_fu_305_p1, inDataLeft_V_trunc_reg_888, ap_CS_fsm_state4, inDataRight_V_trunc_reg_893, ap_CS_fsm_state14, ap_CS_fsm_state2, p_Val2_trunc_fu_833_p1, ap_CS_fsm_state15, p_Val2_5_trunc_fu_854_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            array_r_d1 <= inDataRight_V_trunc_reg_893;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_d1 <= p_Val2_5_trunc_fu_854_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_d1 <= inDataLeft_V_trunc_reg_888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_d1 <= p_Val2_trunc_fu_833_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_d1 <= inDataLeft_V_trunc_fu_305_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_d1 <= a1_a0_V_read_reg_878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_d1 <= b1_a0_V;
        else 
            array_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_r_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_block_state16_io, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_block_state16_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            array_r_we0 <= ap_const_logic_1;
        else 
            array_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_we1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_block_state16_io, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_block_state16_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            array_r_we1 <= ap_const_logic_1;
        else 
            array_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_1_fu_764_p2 <= (newsignbit_1_reg_1055 and deleted_ones_1_fu_732_p3);
    brmerge40_demorgan_i_fu_541_p2 <= (newsignbit_reg_978 and deleted_ones_fu_509_p3);
    brmerge_i_i1_fu_748_p2 <= (newsignbit_1_reg_1055 or p_not_i_i1_fu_742_p2);
    brmerge_i_i_fu_525_p2 <= (newsignbit_reg_978 or p_not_i_i_fu_519_p2);
    brmerge_i_i_i1_fu_786_p2 <= (underflow_1_fu_781_p2 or overflow_1_fu_758_p2);
    brmerge_i_i_i_fu_563_p2 <= (underflow_fu_558_p2 or overflow_fu_535_p2);
    carry_1_fu_636_p2 <= (tmp_29_fu_608_p3 and tmp_12_fu_630_p2);
    carry_fu_442_p2 <= (tmp_23_fu_414_p3 and tmp_s_fu_436_p2);
    deleted_ones_1_fu_732_p3 <= 
        p_41_i_i1_fu_727_p2 when (carry_1_reg_1061(0) = '1') else 
        Range1_all_ones_1_reg_1073;
    deleted_ones_fu_509_p3 <= 
        p_41_i_i_fu_504_p2 when (carry_reg_984(0) = '1') else 
        Range1_all_ones_reg_996;
    deleted_zeros_1_fu_716_p3 <= 
        Range1_all_ones_1_reg_1073 when (carry_1_reg_1061(0) = '1') else 
        Range1_all_zeros_1_reg_1080;
    deleted_zeros_fu_493_p3 <= 
        Range1_all_ones_reg_996 when (carry_reg_984(0) = '1') else 
        Range1_all_zeros_reg_1003;

    grp_fu_279_p0_assign_proc : process(ap_CS_fsm_state8, OP1_V_fu_359_p1, OP1_V_reg_936, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_279_p0 <= OP1_V_reg_936(27 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_279_p0 <= OP1_V_fu_359_p1(27 - 1 downto 0);
        else 
            grp_fu_279_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_279_p1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, OP2_V_fu_363_p1, OP2_V_1_fu_371_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_279_p1 <= OP2_V_1_fu_371_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_279_p1 <= OP2_V_fu_363_p1(24 - 1 downto 0);
        else 
            grp_fu_279_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_V_fu_319_p2 <= std_logic_vector(unsigned(p_s_reg_268) + unsigned(ap_const_lv3_1));
    inDataLeft_V_trunc_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inDataLeft_V_read_reg_868),27));
    inDataRight_V_trunc_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inDataRight_V_read_reg_863),27));
    newsignbit_1_fu_622_p3 <= p_Val2_9_fu_616_p2(23 downto 23);
    newsignbit_fu_428_p3 <= p_Val2_4_fu_422_p2(23 downto 23);
    outDataLeft_V <= p_Val2_s_reg_255;

    outDataLeft_V_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_reg_ioackin_outDataLeft_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_0 = ap_reg_ioackin_outDataLeft_V_ap_ack))) then 
            outDataLeft_V_ap_vld <= ap_const_logic_1;
        else 
            outDataLeft_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    outDataLeft_V_blk_n_assign_proc : process(outDataLeft_V_ap_ack, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outDataLeft_V_blk_n <= outDataLeft_V_ap_ack;
        else 
            outDataLeft_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outDataRight_V <= p_Val2_5_reg_242;

    outDataRight_V_ap_vld_assign_proc : process(ap_CS_fsm_state16, ap_reg_ioackin_outDataRight_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_0 = ap_reg_ioackin_outDataRight_V_ap_ack))) then 
            outDataRight_V_ap_vld <= ap_const_logic_1;
        else 
            outDataRight_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    outDataRight_V_blk_n_assign_proc : process(outDataRight_V_ap_ack, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outDataRight_V_blk_n <= outDataRight_V_ap_ack;
        else 
            outDataRight_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    overflow_1_fu_758_p2 <= (brmerge_i_i1_fu_748_p2 and tmp_16_fu_753_p2);
    overflow_fu_535_p2 <= (brmerge_i_i_fu_525_p2 and tmp_9_fu_530_p2);
    p_38_i_i1_fu_738_p2 <= (carry_1_reg_1061 and Range1_all_ones_1_reg_1073);
    p_38_i_i_fu_515_p2 <= (carry_reg_984 and Range1_all_ones_reg_996);
    p_41_i_i1_fu_727_p2 <= (Range2_all_ones_1_reg_1068 and tmp_15_fu_721_p2);
    p_41_i_i_fu_504_p2 <= (Range2_all_ones_reg_991 and tmp_1_fu_498_p2);
    p_Val2_2_fu_387_p2 <= std_logic_vector(signed(tmp_8_cast_fu_383_p1) + signed(reg_301));
    p_Val2_3_fu_401_p4 <= p_Val2_2_fu_387_p2(47 downto 24);
    p_Val2_4_4_fu_695_p3 <= 
        ap_const_lv24_800000 when (underflow_reg_1028(0) = '1') else 
        p_Val2_4_reg_972;
    p_Val2_4_fu_422_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_401_p4) + unsigned(tmp_5_fu_411_p1));
    p_Val2_4_mux_fu_689_p3 <= 
        ap_const_lv24_7FFFFF when (brmerge_i_i_i_reg_1033(0) = '1') else 
        p_Val2_4_reg_972;
    p_Val2_5_trunc_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_reg_242),27));
    p_Val2_7_fu_581_p2 <= std_logic_vector(signed(tmp_13_cast_fu_577_p1) + signed(reg_301));
    p_Val2_8_fu_595_p4 <= p_Val2_7_fu_581_p2(47 downto 24);
    p_Val2_9_5_fu_807_p3 <= 
        ap_const_lv24_800000 when (underflow_1_reg_1105(0) = '1') else 
        p_Val2_9_reg_1049;
    p_Val2_9_fu_616_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_595_p4) + unsigned(tmp_11_fu_605_p1));
    p_Val2_9_mux_fu_801_p3 <= 
        ap_const_lv24_7FFFFF when (brmerge_i_i_i1_reg_1110(0) = '1') else 
        p_Val2_9_reg_1049;
    p_Val2_trunc_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_255),27));
    p_not_i_i1_fu_742_p2 <= (deleted_zeros_1_fu_716_p3 xor ap_const_lv1_1);
    p_not_i_i_fu_519_p2 <= (deleted_zeros_fu_493_p3 xor ap_const_lv1_1);
    resultLeft_V_fu_701_p3 <= 
        p_Val2_4_mux_fu_689_p3 when (underflow_not_fu_684_p2(0) = '1') else 
        p_Val2_4_4_fu_695_p3;
    resultRight_V_fu_813_p3 <= 
        p_Val2_9_mux_fu_801_p3 when (underflow_1_not_fu_796_p2(0) = '1') else 
        p_Val2_9_5_fu_807_p3;
    samples_V_load11_tru_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1120),27));
    samples_V_load_114_t_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_1125),27));
    samples_V_load_217_t_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_1130),27));
    samples_V_load_320_t_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_1135),27));
    tmp1_fu_680_p2 <= (brmerge40_demorgan_i_reg_1023 or tmp_9_reg_1018);
    tmp2_demorgan_fu_769_p2 <= (p_38_i_i1_fu_738_p2 or brmerge40_demorgan_i_1_fu_764_p2);
    tmp2_fu_775_p2 <= (tmp2_demorgan_fu_769_p2 xor ap_const_lv1_1);
    tmp3_fu_792_p2 <= (brmerge40_demorgan_i_1_reg_1100 or tmp_16_reg_1095);
    tmp_10_fu_569_p3 <= (p_Val2_5_reg_242 & ap_const_lv24_0);
    tmp_11_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_1008),24));
    tmp_12_fu_630_p2 <= (newsignbit_1_fu_622_p3 xor ap_const_lv1_1);
        tmp_13_cast_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_569_p3),51));

    tmp_13_fu_642_p4 <= p_Val2_7_fu_581_p2(50 downto 49);
    tmp_14_fu_658_p4 <= p_Val2_7_fu_581_p2(50 downto 48);
    tmp_15_fu_721_p2 <= (tmp_31_fu_709_p3 xor ap_const_lv1_1);
    tmp_16_fu_753_p2 <= (signbit_1_reg_1043 xor ap_const_lv1_1);
    tmp_17_fu_825_p1 <= array_r_q0(24 - 1 downto 0);
    tmp_18_fu_838_p1 <= array_r_q0(24 - 1 downto 0);
    tmp_19_fu_842_p1 <= array_r_q1(24 - 1 downto 0);
    tmp_1_fu_498_p2 <= (tmp_25_fu_486_p3 xor ap_const_lv1_1);
    tmp_20_fu_345_p1 <= array_r_q0(24 - 1 downto 0);
    tmp_23_fu_414_p3 <= p_Val2_2_fu_387_p2(47 downto 47);
    tmp_25_fu_486_p3 <= p_Val2_2_reg_961(48 downto 48);
    tmp_26_fu_367_p1 <= array_r_q1(24 - 1 downto 0);
    tmp_29_fu_608_p3 <= p_Val2_7_fu_581_p2(47 downto 47);
    tmp_2_fu_313_p2 <= "1" when (p_s_reg_268 = ap_const_lv3_5) else "0";
    tmp_31_fu_709_p3 <= p_Val2_7_reg_1038(48 downto 48);
    tmp_3_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_268),4));
    tmp_3_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_268),32));
    tmp_4_fu_821_p1 <= array_r_q1(24 - 1 downto 0);
    tmp_5_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_951),24));
    tmp_6_fu_448_p4 <= p_Val2_2_fu_387_p2(50 downto 49);
    tmp_7_fu_464_p4 <= p_Val2_2_fu_387_p2(50 downto 48);
        tmp_8_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_375_p3),51));

    tmp_8_fu_375_p3 <= (p_Val2_s_reg_255 & ap_const_lv24_0);
    tmp_9_fu_530_p2 <= (signbit_reg_966 xor ap_const_lv1_1);
    tmp_demorgan_fu_546_p2 <= (p_38_i_i_fu_515_p2 or brmerge40_demorgan_i_fu_541_p2);
    tmp_fu_552_p2 <= (tmp_demorgan_fu_546_p2 xor ap_const_lv1_1);
    tmp_s_fu_436_p2 <= (newsignbit_fu_428_p3 xor ap_const_lv1_1);
    underflow_1_fu_781_p2 <= (signbit_1_reg_1043 and tmp2_fu_775_p2);
    underflow_1_not_fu_796_p2 <= (tmp3_fu_792_p2 or p_38_i_i1_reg_1090);
    underflow_fu_558_p2 <= (signbit_reg_966 and tmp_fu_552_p2);
    underflow_not_fu_684_p2 <= (tmp1_fu_680_p2 or p_38_i_i_reg_1013);
end behav;
