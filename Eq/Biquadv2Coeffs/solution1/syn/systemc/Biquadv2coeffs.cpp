// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Biquadv2coeffs.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Biquadv2coeffs::ap_const_logic_1 = sc_dt::Log_1;
const int Biquadv2coeffs::C_S_AXI_DATA_WIDTH = "100000";
const sc_logic Biquadv2coeffs::ap_const_logic_0 = sc_dt::Log_0;
const bool Biquadv2coeffs::ap_const_boolean_1 = true;

Biquadv2coeffs::Biquadv2coeffs(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Biquadv2coeffs_coeffs_s_axi_U = new Biquadv2coeffs_coeffs_s_axi<C_S_AXI_COEFFS_ADDR_WIDTH,C_S_AXI_COEFFS_DATA_WIDTH>("Biquadv2coeffs_coeffs_s_axi_U");
    Biquadv2coeffs_coeffs_s_axi_U->AWVALID(s_axi_coeffs_AWVALID);
    Biquadv2coeffs_coeffs_s_axi_U->AWREADY(s_axi_coeffs_AWREADY);
    Biquadv2coeffs_coeffs_s_axi_U->AWADDR(s_axi_coeffs_AWADDR);
    Biquadv2coeffs_coeffs_s_axi_U->WVALID(s_axi_coeffs_WVALID);
    Biquadv2coeffs_coeffs_s_axi_U->WREADY(s_axi_coeffs_WREADY);
    Biquadv2coeffs_coeffs_s_axi_U->WDATA(s_axi_coeffs_WDATA);
    Biquadv2coeffs_coeffs_s_axi_U->WSTRB(s_axi_coeffs_WSTRB);
    Biquadv2coeffs_coeffs_s_axi_U->ARVALID(s_axi_coeffs_ARVALID);
    Biquadv2coeffs_coeffs_s_axi_U->ARREADY(s_axi_coeffs_ARREADY);
    Biquadv2coeffs_coeffs_s_axi_U->ARADDR(s_axi_coeffs_ARADDR);
    Biquadv2coeffs_coeffs_s_axi_U->RVALID(s_axi_coeffs_RVALID);
    Biquadv2coeffs_coeffs_s_axi_U->RREADY(s_axi_coeffs_RREADY);
    Biquadv2coeffs_coeffs_s_axi_U->RDATA(s_axi_coeffs_RDATA);
    Biquadv2coeffs_coeffs_s_axi_U->RRESP(s_axi_coeffs_RRESP);
    Biquadv2coeffs_coeffs_s_axi_U->BVALID(s_axi_coeffs_BVALID);
    Biquadv2coeffs_coeffs_s_axi_U->BREADY(s_axi_coeffs_BREADY);
    Biquadv2coeffs_coeffs_s_axi_U->BRESP(s_axi_coeffs_BRESP);
    Biquadv2coeffs_coeffs_s_axi_U->ACLK(ap_clk);
    Biquadv2coeffs_coeffs_s_axi_U->ARESET(ap_rst_n_inv);
    Biquadv2coeffs_coeffs_s_axi_U->ACLK_EN(ap_var_for_const0);
    Biquadv2coeffs_coeffs_s_axi_U->in0b0_a0_V(in0b0_a0_V);
    Biquadv2coeffs_coeffs_s_axi_U->in0b1_a0_V(in0b1_a0_V);
    Biquadv2coeffs_coeffs_s_axi_U->in0b2_a0_V(in0b2_a0_V);
    Biquadv2coeffs_coeffs_s_axi_U->in0a1_a0_V(in0a1_a0_V);
    Biquadv2coeffs_coeffs_s_axi_U->in0a2_a0_V(in0a2_a0_V);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_out0a1_a0_V);
    sensitive << ( ap_start );
    sensitive << ( in0a1_a0_V );

    SC_METHOD(thread_out0a1_a0_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_out0a2_a0_V);
    sensitive << ( ap_start );
    sensitive << ( in0a2_a0_V );

    SC_METHOD(thread_out0a2_a0_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_out0b0_a0_V);
    sensitive << ( ap_start );
    sensitive << ( in0b0_a0_V );

    SC_METHOD(thread_out0b0_a0_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_out0b1_a0_V);
    sensitive << ( ap_start );
    sensitive << ( in0b1_a0_V );

    SC_METHOD(thread_out0b1_a0_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_out0b2_a0_V);
    sensitive << ( ap_start );
    sensitive << ( in0b2_a0_V );

    SC_METHOD(thread_out0b2_a0_V_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Biquadv2coeffs_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out0b0_a0_V, "(port)out0b0_a0_V");
    sc_trace(mVcdFile, out0b0_a0_V_ap_vld, "(port)out0b0_a0_V_ap_vld");
    sc_trace(mVcdFile, out0b1_a0_V, "(port)out0b1_a0_V");
    sc_trace(mVcdFile, out0b1_a0_V_ap_vld, "(port)out0b1_a0_V_ap_vld");
    sc_trace(mVcdFile, out0b2_a0_V, "(port)out0b2_a0_V");
    sc_trace(mVcdFile, out0b2_a0_V_ap_vld, "(port)out0b2_a0_V_ap_vld");
    sc_trace(mVcdFile, out0a1_a0_V, "(port)out0a1_a0_V");
    sc_trace(mVcdFile, out0a1_a0_V_ap_vld, "(port)out0a1_a0_V_ap_vld");
    sc_trace(mVcdFile, out0a2_a0_V, "(port)out0a2_a0_V");
    sc_trace(mVcdFile, out0a2_a0_V_ap_vld, "(port)out0a2_a0_V_ap_vld");
    sc_trace(mVcdFile, s_axi_coeffs_AWVALID, "(port)s_axi_coeffs_AWVALID");
    sc_trace(mVcdFile, s_axi_coeffs_AWREADY, "(port)s_axi_coeffs_AWREADY");
    sc_trace(mVcdFile, s_axi_coeffs_AWADDR, "(port)s_axi_coeffs_AWADDR");
    sc_trace(mVcdFile, s_axi_coeffs_WVALID, "(port)s_axi_coeffs_WVALID");
    sc_trace(mVcdFile, s_axi_coeffs_WREADY, "(port)s_axi_coeffs_WREADY");
    sc_trace(mVcdFile, s_axi_coeffs_WDATA, "(port)s_axi_coeffs_WDATA");
    sc_trace(mVcdFile, s_axi_coeffs_WSTRB, "(port)s_axi_coeffs_WSTRB");
    sc_trace(mVcdFile, s_axi_coeffs_ARVALID, "(port)s_axi_coeffs_ARVALID");
    sc_trace(mVcdFile, s_axi_coeffs_ARREADY, "(port)s_axi_coeffs_ARREADY");
    sc_trace(mVcdFile, s_axi_coeffs_ARADDR, "(port)s_axi_coeffs_ARADDR");
    sc_trace(mVcdFile, s_axi_coeffs_RVALID, "(port)s_axi_coeffs_RVALID");
    sc_trace(mVcdFile, s_axi_coeffs_RREADY, "(port)s_axi_coeffs_RREADY");
    sc_trace(mVcdFile, s_axi_coeffs_RDATA, "(port)s_axi_coeffs_RDATA");
    sc_trace(mVcdFile, s_axi_coeffs_RRESP, "(port)s_axi_coeffs_RRESP");
    sc_trace(mVcdFile, s_axi_coeffs_BVALID, "(port)s_axi_coeffs_BVALID");
    sc_trace(mVcdFile, s_axi_coeffs_BREADY, "(port)s_axi_coeffs_BREADY");
    sc_trace(mVcdFile, s_axi_coeffs_BRESP, "(port)s_axi_coeffs_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, in0b0_a0_V, "in0b0_a0_V");
    sc_trace(mVcdFile, in0b1_a0_V, "in0b1_a0_V");
    sc_trace(mVcdFile, in0b2_a0_V, "in0b2_a0_V");
    sc_trace(mVcdFile, in0a1_a0_V, "in0a1_a0_V");
    sc_trace(mVcdFile, in0a2_a0_V, "in0a2_a0_V");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
#endif

    }
    mHdltvinHandle.open("Biquadv2coeffs.hdltvin.dat");
    mHdltvoutHandle.open("Biquadv2coeffs.hdltvout.dat");
}

Biquadv2coeffs::~Biquadv2coeffs() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Biquadv2coeffs_coeffs_s_axi_U;
}

void Biquadv2coeffs::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Biquadv2coeffs::thread_ap_done() {
    ap_done = ap_start.read();
}

void Biquadv2coeffs::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void Biquadv2coeffs::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void Biquadv2coeffs::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Biquadv2coeffs::thread_out0a1_a0_V() {
    out0a1_a0_V = in0a1_a0_V.read();
}

void Biquadv2coeffs::thread_out0a1_a0_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        out0a1_a0_V_ap_vld = ap_const_logic_1;
    } else {
        out0a1_a0_V_ap_vld = ap_const_logic_0;
    }
}

void Biquadv2coeffs::thread_out0a2_a0_V() {
    out0a2_a0_V = in0a2_a0_V.read();
}

void Biquadv2coeffs::thread_out0a2_a0_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        out0a2_a0_V_ap_vld = ap_const_logic_1;
    } else {
        out0a2_a0_V_ap_vld = ap_const_logic_0;
    }
}

void Biquadv2coeffs::thread_out0b0_a0_V() {
    out0b0_a0_V = in0b0_a0_V.read();
}

void Biquadv2coeffs::thread_out0b0_a0_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        out0b0_a0_V_ap_vld = ap_const_logic_1;
    } else {
        out0b0_a0_V_ap_vld = ap_const_logic_0;
    }
}

void Biquadv2coeffs::thread_out0b1_a0_V() {
    out0b1_a0_V = in0b1_a0_V.read();
}

void Biquadv2coeffs::thread_out0b1_a0_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        out0b1_a0_V_ap_vld = ap_const_logic_1;
    } else {
        out0b1_a0_V_ap_vld = ap_const_logic_0;
    }
}

void Biquadv2coeffs::thread_out0b2_a0_V() {
    out0b2_a0_V = in0b2_a0_V.read();
}

void Biquadv2coeffs::thread_out0b2_a0_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        out0b2_a0_V_ap_vld = ap_const_logic_1;
    } else {
        out0b2_a0_V_ap_vld = ap_const_logic_0;
    }
}

void Biquadv2coeffs::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0b0_a0_V\" :  \"" << out0b0_a0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0b0_a0_V_ap_vld\" :  \"" << out0b0_a0_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0b1_a0_V\" :  \"" << out0b1_a0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0b1_a0_V_ap_vld\" :  \"" << out0b1_a0_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0b2_a0_V\" :  \"" << out0b2_a0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0b2_a0_V_ap_vld\" :  \"" << out0b2_a0_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0a1_a0_V\" :  \"" << out0a1_a0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0a1_a0_V_ap_vld\" :  \"" << out0a1_a0_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0a2_a0_V\" :  \"" << out0a2_a0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out0a2_a0_V_ap_vld\" :  \"" << out0a2_a0_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_AWVALID\" :  \"" << s_axi_coeffs_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_AWREADY\" :  \"" << s_axi_coeffs_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_AWADDR\" :  \"" << s_axi_coeffs_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_WVALID\" :  \"" << s_axi_coeffs_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_WREADY\" :  \"" << s_axi_coeffs_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_WDATA\" :  \"" << s_axi_coeffs_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_WSTRB\" :  \"" << s_axi_coeffs_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_ARVALID\" :  \"" << s_axi_coeffs_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_ARREADY\" :  \"" << s_axi_coeffs_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_ARADDR\" :  \"" << s_axi_coeffs_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_RVALID\" :  \"" << s_axi_coeffs_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_RREADY\" :  \"" << s_axi_coeffs_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_RDATA\" :  \"" << s_axi_coeffs_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_RRESP\" :  \"" << s_axi_coeffs_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_BVALID\" :  \"" << s_axi_coeffs_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_coeffs_BREADY\" :  \"" << s_axi_coeffs_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_coeffs_BRESP\" :  \"" << s_axi_coeffs_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

