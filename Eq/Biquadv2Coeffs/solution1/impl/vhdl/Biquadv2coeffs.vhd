-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Biquadv2coeffs is
generic (
    C_S_AXI_COEFFS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_COEFFS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out0b0_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
    out0b0_a0_V_ap_vld : OUT STD_LOGIC;
    out0b1_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
    out0b1_a0_V_ap_vld : OUT STD_LOGIC;
    out0b2_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
    out0b2_a0_V_ap_vld : OUT STD_LOGIC;
    out0a1_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
    out0a1_a0_V_ap_vld : OUT STD_LOGIC;
    out0a2_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
    out0a2_a0_V_ap_vld : OUT STD_LOGIC;
    s_axi_coeffs_AWVALID : IN STD_LOGIC;
    s_axi_coeffs_AWREADY : OUT STD_LOGIC;
    s_axi_coeffs_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_COEFFS_ADDR_WIDTH-1 downto 0);
    s_axi_coeffs_WVALID : IN STD_LOGIC;
    s_axi_coeffs_WREADY : OUT STD_LOGIC;
    s_axi_coeffs_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_COEFFS_DATA_WIDTH-1 downto 0);
    s_axi_coeffs_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_COEFFS_DATA_WIDTH/8-1 downto 0);
    s_axi_coeffs_ARVALID : IN STD_LOGIC;
    s_axi_coeffs_ARREADY : OUT STD_LOGIC;
    s_axi_coeffs_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_COEFFS_ADDR_WIDTH-1 downto 0);
    s_axi_coeffs_RVALID : OUT STD_LOGIC;
    s_axi_coeffs_RREADY : IN STD_LOGIC;
    s_axi_coeffs_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_COEFFS_DATA_WIDTH-1 downto 0);
    s_axi_coeffs_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_coeffs_BVALID : OUT STD_LOGIC;
    s_axi_coeffs_BREADY : IN STD_LOGIC;
    s_axi_coeffs_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC );
end;


architecture behav of Biquadv2coeffs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Biquadv2coeffs,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=195,HLS_SYN_LUT=310}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal in0b0_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal in0b1_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal in0b2_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal in0a1_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal in0a2_a0_V : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;

    component Biquadv2coeffs_coeffs_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in0b0_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        in0b1_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        in0b2_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        in0a1_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0);
        in0a2_a0_V : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    Biquadv2coeffs_coeffs_s_axi_U : component Biquadv2coeffs_coeffs_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_COEFFS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_COEFFS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_coeffs_AWVALID,
        AWREADY => s_axi_coeffs_AWREADY,
        AWADDR => s_axi_coeffs_AWADDR,
        WVALID => s_axi_coeffs_WVALID,
        WREADY => s_axi_coeffs_WREADY,
        WDATA => s_axi_coeffs_WDATA,
        WSTRB => s_axi_coeffs_WSTRB,
        ARVALID => s_axi_coeffs_ARVALID,
        ARREADY => s_axi_coeffs_ARREADY,
        ARADDR => s_axi_coeffs_ARADDR,
        RVALID => s_axi_coeffs_RVALID,
        RREADY => s_axi_coeffs_RREADY,
        RDATA => s_axi_coeffs_RDATA,
        RRESP => s_axi_coeffs_RRESP,
        BVALID => s_axi_coeffs_BVALID,
        BREADY => s_axi_coeffs_BREADY,
        BRESP => s_axi_coeffs_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in0b0_a0_V => in0b0_a0_V,
        in0b1_a0_V => in0b1_a0_V,
        in0b2_a0_V => in0b2_a0_V,
        in0a1_a0_V => in0a1_a0_V,
        in0a2_a0_V => in0a2_a0_V);




    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    out0a1_a0_V <= in0a1_a0_V;

    out0a1_a0_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            out0a1_a0_V_ap_vld <= ap_const_logic_1;
        else 
            out0a1_a0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out0a2_a0_V <= in0a2_a0_V;

    out0a2_a0_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            out0a2_a0_V_ap_vld <= ap_const_logic_1;
        else 
            out0a2_a0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out0b0_a0_V <= in0b0_a0_V;

    out0b0_a0_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            out0b0_a0_V_ap_vld <= ap_const_logic_1;
        else 
            out0b0_a0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out0b1_a0_V <= in0b1_a0_V;

    out0b1_a0_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            out0b1_a0_V_ap_vld <= ap_const_logic_1;
        else 
            out0b1_a0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out0b2_a0_V <= in0b2_a0_V;

    out0b2_a0_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            out0b2_a0_V_ap_vld <= ap_const_logic_1;
        else 
            out0b2_a0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
