// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Biquadv2coeffs,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=195,HLS_SYN_LUT=310}" *)

module Biquadv2coeffs (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out0b0_a0_V,
        out0b0_a0_V_ap_vld,
        out0b1_a0_V,
        out0b1_a0_V_ap_vld,
        out0b2_a0_V,
        out0b2_a0_V_ap_vld,
        out0a1_a0_V,
        out0a1_a0_V_ap_vld,
        out0a2_a0_V,
        out0a2_a0_V_ap_vld,
        s_axi_coeffs_AWVALID,
        s_axi_coeffs_AWREADY,
        s_axi_coeffs_AWADDR,
        s_axi_coeffs_WVALID,
        s_axi_coeffs_WREADY,
        s_axi_coeffs_WDATA,
        s_axi_coeffs_WSTRB,
        s_axi_coeffs_ARVALID,
        s_axi_coeffs_ARREADY,
        s_axi_coeffs_ARADDR,
        s_axi_coeffs_RVALID,
        s_axi_coeffs_RREADY,
        s_axi_coeffs_RDATA,
        s_axi_coeffs_RRESP,
        s_axi_coeffs_BVALID,
        s_axi_coeffs_BREADY,
        s_axi_coeffs_BRESP,
        ap_clk,
        ap_rst_n
);

parameter    C_S_AXI_COEFFS_DATA_WIDTH = 32;
parameter    C_S_AXI_COEFFS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_COEFFS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [26:0] out0b0_a0_V;
output   out0b0_a0_V_ap_vld;
output  [26:0] out0b1_a0_V;
output   out0b1_a0_V_ap_vld;
output  [26:0] out0b2_a0_V;
output   out0b2_a0_V_ap_vld;
output  [26:0] out0a1_a0_V;
output   out0a1_a0_V_ap_vld;
output  [26:0] out0a2_a0_V;
output   out0a2_a0_V_ap_vld;
input   s_axi_coeffs_AWVALID;
output   s_axi_coeffs_AWREADY;
input  [C_S_AXI_COEFFS_ADDR_WIDTH - 1:0] s_axi_coeffs_AWADDR;
input   s_axi_coeffs_WVALID;
output   s_axi_coeffs_WREADY;
input  [C_S_AXI_COEFFS_DATA_WIDTH - 1:0] s_axi_coeffs_WDATA;
input  [C_S_AXI_COEFFS_WSTRB_WIDTH - 1:0] s_axi_coeffs_WSTRB;
input   s_axi_coeffs_ARVALID;
output   s_axi_coeffs_ARREADY;
input  [C_S_AXI_COEFFS_ADDR_WIDTH - 1:0] s_axi_coeffs_ARADDR;
output   s_axi_coeffs_RVALID;
input   s_axi_coeffs_RREADY;
output  [C_S_AXI_COEFFS_DATA_WIDTH - 1:0] s_axi_coeffs_RDATA;
output  [1:0] s_axi_coeffs_RRESP;
output   s_axi_coeffs_BVALID;
input   s_axi_coeffs_BREADY;
output  [1:0] s_axi_coeffs_BRESP;
input   ap_clk;
input   ap_rst_n;

reg out0b0_a0_V_ap_vld;
reg out0b1_a0_V_ap_vld;
reg out0b2_a0_V_ap_vld;
reg out0a1_a0_V_ap_vld;
reg out0a2_a0_V_ap_vld;

wire   [26:0] in0b0_a0_V;
wire   [26:0] in0b1_a0_V;
wire   [26:0] in0b2_a0_V;
wire   [26:0] in0a1_a0_V;
wire   [26:0] in0a2_a0_V;
reg    ap_rst_n_inv;

Biquadv2coeffs_coeffs_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_COEFFS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_COEFFS_DATA_WIDTH ))
Biquadv2coeffs_coeffs_s_axi_U(
    .AWVALID(s_axi_coeffs_AWVALID),
    .AWREADY(s_axi_coeffs_AWREADY),
    .AWADDR(s_axi_coeffs_AWADDR),
    .WVALID(s_axi_coeffs_WVALID),
    .WREADY(s_axi_coeffs_WREADY),
    .WDATA(s_axi_coeffs_WDATA),
    .WSTRB(s_axi_coeffs_WSTRB),
    .ARVALID(s_axi_coeffs_ARVALID),
    .ARREADY(s_axi_coeffs_ARREADY),
    .ARADDR(s_axi_coeffs_ARADDR),
    .RVALID(s_axi_coeffs_RVALID),
    .RREADY(s_axi_coeffs_RREADY),
    .RDATA(s_axi_coeffs_RDATA),
    .RRESP(s_axi_coeffs_RRESP),
    .BVALID(s_axi_coeffs_BVALID),
    .BREADY(s_axi_coeffs_BREADY),
    .BRESP(s_axi_coeffs_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .in0b0_a0_V(in0b0_a0_V),
    .in0b1_a0_V(in0b1_a0_V),
    .in0b2_a0_V(in0b2_a0_V),
    .in0a1_a0_V(in0a1_a0_V),
    .in0a2_a0_V(in0a2_a0_V)
);

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        out0a1_a0_V_ap_vld = 1'b1;
    end else begin
        out0a1_a0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        out0a2_a0_V_ap_vld = 1'b1;
    end else begin
        out0a2_a0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        out0b0_a0_V_ap_vld = 1'b1;
    end else begin
        out0b0_a0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        out0b1_a0_V_ap_vld = 1'b1;
    end else begin
        out0b1_a0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        out0b2_a0_V_ap_vld = 1'b1;
    end else begin
        out0b2_a0_V_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign out0a1_a0_V = in0a1_a0_V;

assign out0a2_a0_V = in0a2_a0_V;

assign out0b0_a0_V = in0b0_a0_V;

assign out0b1_a0_V = in0b1_a0_V;

assign out0b2_a0_V = in0b2_a0_V;

endmodule //Biquadv2coeffs
