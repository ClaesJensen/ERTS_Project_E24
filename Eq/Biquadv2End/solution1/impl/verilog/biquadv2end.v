// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="biquadv2end,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.416000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=1666,HLS_SYN_LUT=1389}" *)

module biquadv2end (
        ap_clk,
        ap_rst_n,
        inDataLeft_V,
        inDataLeft_V_ap_vld,
        inDataLeft_V_ap_ack,
        inDataRight_V,
        inDataRight_V_ap_vld,
        inDataRight_V_ap_ack,
        s_axi_biquadv2_AWVALID,
        s_axi_biquadv2_AWREADY,
        s_axi_biquadv2_AWADDR,
        s_axi_biquadv2_WVALID,
        s_axi_biquadv2_WREADY,
        s_axi_biquadv2_WDATA,
        s_axi_biquadv2_WSTRB,
        s_axi_biquadv2_ARVALID,
        s_axi_biquadv2_ARREADY,
        s_axi_biquadv2_ARADDR,
        s_axi_biquadv2_RVALID,
        s_axi_biquadv2_RREADY,
        s_axi_biquadv2_RDATA,
        s_axi_biquadv2_RRESP,
        s_axi_biquadv2_BVALID,
        s_axi_biquadv2_BREADY,
        s_axi_biquadv2_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_BIQUADV2_DATA_WIDTH = 32;
parameter    C_S_AXI_BIQUADV2_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BIQUADV2_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] inDataLeft_V;
input   inDataLeft_V_ap_vld;
output   inDataLeft_V_ap_ack;
input  [23:0] inDataRight_V;
input   inDataRight_V_ap_vld;
output   inDataRight_V_ap_ack;
input   s_axi_biquadv2_AWVALID;
output   s_axi_biquadv2_AWREADY;
input  [C_S_AXI_BIQUADV2_ADDR_WIDTH - 1:0] s_axi_biquadv2_AWADDR;
input   s_axi_biquadv2_WVALID;
output   s_axi_biquadv2_WREADY;
input  [C_S_AXI_BIQUADV2_DATA_WIDTH - 1:0] s_axi_biquadv2_WDATA;
input  [C_S_AXI_BIQUADV2_WSTRB_WIDTH - 1:0] s_axi_biquadv2_WSTRB;
input   s_axi_biquadv2_ARVALID;
output   s_axi_biquadv2_ARREADY;
input  [C_S_AXI_BIQUADV2_ADDR_WIDTH - 1:0] s_axi_biquadv2_ARADDR;
output   s_axi_biquadv2_RVALID;
input   s_axi_biquadv2_RREADY;
output  [C_S_AXI_BIQUADV2_DATA_WIDTH - 1:0] s_axi_biquadv2_RDATA;
output  [1:0] s_axi_biquadv2_RRESP;
output   s_axi_biquadv2_BVALID;
input   s_axi_biquadv2_BREADY;
output  [1:0] s_axi_biquadv2_BRESP;
output   interrupt;

reg inDataLeft_V_ap_ack;
reg inDataRight_V_ap_ack;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [26:0] b0_a0_V;
wire   [26:0] b1_a0_V;
wire   [26:0] b2_a0_V;
wire   [26:0] a1_a0_V;
wire   [26:0] a2_a0_V;
reg    outDataLeft_V_ap_vld;
reg    outDataRight_V_ap_vld;
reg   [3:0] array_r_address0;
reg    array_r_ce0;
reg    array_r_we0;
reg   [26:0] array_r_d0;
wire   [26:0] array_r_q0;
reg   [3:0] array_r_address1;
reg    array_r_ce1;
reg    array_r_we1;
reg   [26:0] array_r_d1;
wire   [26:0] array_r_q1;
reg    inDataLeft_V_blk_n;
reg    inDataRight_V_blk_n;
wire   [50:0] grp_fu_277_p2;
reg   [50:0] reg_299;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [23:0] inDataRight_V_read_reg_861;
reg    ap_block_state1;
reg   [23:0] inDataLeft_V_read_reg_866;
reg   [26:0] a2_a0_V_read_reg_871;
reg   [26:0] a1_a0_V_read_reg_876;
reg   [26:0] b2_a0_V_read_reg_881;
wire   [26:0] inDataLeft_V_trunc_fu_303_p1;
reg   [26:0] inDataLeft_V_trunc_reg_886;
wire    ap_CS_fsm_state4;
wire   [26:0] inDataRight_V_trunc_fu_307_p1;
reg   [26:0] inDataRight_V_trunc_reg_891;
wire   [2:0] i_V_fu_317_p2;
reg   [2:0] i_V_reg_899;
wire    ap_CS_fsm_state5;
wire   [3:0] tmp_3_cast_fu_328_p1;
reg   [3:0] tmp_3_cast_reg_904;
wire   [0:0] tmp_2_fu_311_p2;
reg   [26:0] array_load_4_reg_919;
wire    ap_CS_fsm_state6;
wire   [23:0] tmp_20_fu_343_p1;
reg   [23:0] tmp_20_reg_924;
wire  signed [50:0] OP1_V_fu_357_p1;
reg  signed [50:0] OP1_V_reg_934;
wire    ap_CS_fsm_state7;
wire  signed [50:0] OP2_V_fu_361_p1;
wire   [23:0] tmp_26_fu_365_p1;
reg   [23:0] tmp_26_reg_944;
reg   [0:0] tmp_22_reg_949;
wire  signed [50:0] OP2_V_1_fu_369_p1;
wire   [50:0] p_Val2_2_fu_385_p2;
reg   [50:0] p_Val2_2_reg_959;
reg   [0:0] signbit_reg_964;
wire   [23:0] p_Val2_4_fu_420_p2;
reg   [23:0] p_Val2_4_reg_970;
wire   [0:0] newsignbit_fu_426_p3;
reg   [0:0] newsignbit_reg_976;
wire   [0:0] carry_fu_440_p2;
reg   [0:0] carry_reg_982;
wire   [0:0] Range2_all_ones_fu_456_p2;
reg   [0:0] Range2_all_ones_reg_989;
wire   [0:0] Range1_all_ones_fu_472_p2;
reg   [0:0] Range1_all_ones_reg_994;
wire   [0:0] Range1_all_zeros_fu_478_p2;
reg   [0:0] Range1_all_zeros_reg_1001;
reg   [0:0] tmp_28_reg_1006;
wire   [0:0] p_38_i_i_fu_513_p2;
reg   [0:0] p_38_i_i_reg_1011;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_9_fu_528_p2;
reg   [0:0] tmp_9_reg_1016;
wire   [0:0] brmerge40_demorgan_i_fu_539_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1021;
wire   [0:0] underflow_fu_556_p2;
reg   [0:0] underflow_reg_1026;
wire   [0:0] brmerge_i_i_i_fu_561_p2;
reg   [0:0] brmerge_i_i_i_reg_1031;
wire   [50:0] p_Val2_7_fu_579_p2;
reg   [50:0] p_Val2_7_reg_1036;
reg   [0:0] signbit_1_reg_1041;
wire   [23:0] p_Val2_9_fu_614_p2;
reg   [23:0] p_Val2_9_reg_1047;
wire   [0:0] newsignbit_1_fu_620_p3;
reg   [0:0] newsignbit_1_reg_1053;
wire   [0:0] carry_1_fu_634_p2;
reg   [0:0] carry_1_reg_1059;
wire   [0:0] Range2_all_ones_1_fu_650_p2;
reg   [0:0] Range2_all_ones_1_reg_1066;
wire   [0:0] Range1_all_ones_1_fu_666_p2;
reg   [0:0] Range1_all_ones_1_reg_1071;
wire   [0:0] Range1_all_zeros_1_fu_672_p2;
reg   [0:0] Range1_all_zeros_1_reg_1078;
wire   [23:0] resultLeft_V_fu_699_p3;
reg   [23:0] resultLeft_V_reg_1083;
wire    ap_CS_fsm_state11;
wire   [0:0] p_38_i_i1_fu_736_p2;
reg   [0:0] p_38_i_i1_reg_1088;
wire   [0:0] tmp_16_fu_751_p2;
reg   [0:0] tmp_16_reg_1093;
wire   [0:0] brmerge40_demorgan_i_1_fu_762_p2;
reg   [0:0] brmerge40_demorgan_i_1_reg_1098;
wire   [0:0] underflow_1_fu_779_p2;
reg   [0:0] underflow_1_reg_1103;
wire   [0:0] brmerge_i_i_i1_fu_784_p2;
reg   [0:0] brmerge_i_i_i1_reg_1108;
wire   [23:0] resultRight_V_fu_811_p3;
wire    ap_CS_fsm_state12;
wire   [23:0] tmp_4_fu_819_p1;
reg   [23:0] tmp_4_reg_1118;
wire    ap_CS_fsm_state13;
wire   [23:0] tmp_17_fu_823_p1;
reg   [23:0] tmp_17_reg_1123;
wire   [23:0] tmp_18_fu_836_p1;
reg   [23:0] tmp_18_reg_1128;
wire    ap_CS_fsm_state14;
wire   [23:0] tmp_19_fu_840_p1;
reg   [23:0] tmp_19_reg_1133;
reg   [23:0] p_Val2_5_reg_240;
reg   [23:0] p_Val2_s_reg_253;
reg   [2:0] p_s_reg_266;
wire   [31:0] tmp_3_fu_323_p1;
wire   [31:0] addr5_cast_fu_338_p1;
wire   [31:0] addr1_cast_fu_352_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [26:0] samples_V_load11_tru_fu_827_p1;
wire   [26:0] p_Val2_trunc_fu_831_p1;
wire    ap_CS_fsm_state15;
wire   [26:0] samples_V_load_114_t_fu_844_p1;
wire   [26:0] samples_V_load_217_t_fu_848_p1;
wire   [26:0] p_Val2_5_trunc_fu_852_p1;
wire    ap_CS_fsm_state17;
wire   [26:0] samples_V_load_320_t_fu_857_p1;
reg  signed [26:0] grp_fu_277_p0;
reg  signed [23:0] grp_fu_277_p1;
wire   [3:0] addr5_fu_332_p2;
wire   [3:0] addr1_fu_347_p2;
wire   [47:0] tmp_8_fu_373_p3;
wire  signed [50:0] tmp_8_cast_fu_381_p1;
wire   [23:0] p_Val2_3_fu_399_p4;
wire   [23:0] tmp_5_fu_409_p1;
wire   [0:0] tmp_23_fu_412_p3;
wire   [0:0] tmp_s_fu_434_p2;
wire   [1:0] tmp_6_fu_446_p4;
wire   [2:0] tmp_7_fu_462_p4;
wire   [0:0] tmp_25_fu_484_p3;
wire   [0:0] tmp_1_fu_496_p2;
wire   [0:0] p_41_i_i_fu_502_p2;
wire   [0:0] deleted_zeros_fu_491_p3;
wire   [0:0] p_not_i_i_fu_517_p2;
wire   [0:0] brmerge_i_i_fu_523_p2;
wire   [0:0] deleted_ones_fu_507_p3;
wire   [0:0] tmp_demorgan_fu_544_p2;
wire   [0:0] tmp_fu_550_p2;
wire   [0:0] overflow_fu_533_p2;
wire   [47:0] tmp_10_fu_567_p3;
wire  signed [50:0] tmp_13_cast_fu_575_p1;
wire   [23:0] p_Val2_8_fu_593_p4;
wire   [23:0] tmp_11_fu_603_p1;
wire   [0:0] tmp_29_fu_606_p3;
wire   [0:0] tmp_12_fu_628_p2;
wire   [1:0] tmp_13_fu_640_p4;
wire   [2:0] tmp_14_fu_656_p4;
wire   [0:0] tmp1_fu_678_p2;
wire   [0:0] underflow_not_fu_682_p2;
wire   [23:0] p_Val2_4_mux_fu_687_p3;
wire   [23:0] p_Val2_4_4_fu_693_p3;
wire   [0:0] tmp_31_fu_707_p3;
wire   [0:0] tmp_15_fu_719_p2;
wire   [0:0] p_41_i_i1_fu_725_p2;
wire   [0:0] deleted_zeros_1_fu_714_p3;
wire   [0:0] p_not_i_i1_fu_740_p2;
wire   [0:0] brmerge_i_i1_fu_746_p2;
wire   [0:0] deleted_ones_1_fu_730_p3;
wire   [0:0] tmp2_demorgan_fu_767_p2;
wire   [0:0] tmp2_fu_773_p2;
wire   [0:0] overflow_1_fu_756_p2;
wire   [0:0] tmp3_fu_790_p2;
wire   [0:0] underflow_1_not_fu_794_p2;
wire   [23:0] p_Val2_9_mux_fu_799_p3;
wire   [23:0] p_Val2_9_5_fu_805_p3;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

biquadv2end_array_r #(
    .DataWidth( 27 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
array_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(array_r_address0),
    .ce0(array_r_ce0),
    .we0(array_r_we0),
    .d0(array_r_d0),
    .q0(array_r_q0),
    .address1(array_r_address1),
    .ce1(array_r_ce1),
    .we1(array_r_we1),
    .d1(array_r_d1),
    .q1(array_r_q1)
);

biquadv2end_biquadv2_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BIQUADV2_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BIQUADV2_DATA_WIDTH ))
biquadv2end_biquadv2_s_axi_U(
    .AWVALID(s_axi_biquadv2_AWVALID),
    .AWREADY(s_axi_biquadv2_AWREADY),
    .AWADDR(s_axi_biquadv2_AWADDR),
    .WVALID(s_axi_biquadv2_WVALID),
    .WREADY(s_axi_biquadv2_WREADY),
    .WDATA(s_axi_biquadv2_WDATA),
    .WSTRB(s_axi_biquadv2_WSTRB),
    .ARVALID(s_axi_biquadv2_ARVALID),
    .ARREADY(s_axi_biquadv2_ARREADY),
    .ARADDR(s_axi_biquadv2_ARADDR),
    .RVALID(s_axi_biquadv2_RVALID),
    .RREADY(s_axi_biquadv2_RREADY),
    .RDATA(s_axi_biquadv2_RDATA),
    .RRESP(s_axi_biquadv2_RRESP),
    .BVALID(s_axi_biquadv2_BVALID),
    .BREADY(s_axi_biquadv2_BREADY),
    .BRESP(s_axi_biquadv2_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .b0_a0_V(b0_a0_V),
    .b1_a0_V(b1_a0_V),
    .b2_a0_V(b2_a0_V),
    .a1_a0_V(a1_a0_V),
    .a2_a0_V(a2_a0_V),
    .outDataLeft_V(p_Val2_s_reg_253),
    .outDataLeft_V_ap_vld(outDataLeft_V_ap_vld),
    .outDataRight_V(p_Val2_5_reg_240),
    .outDataRight_V_ap_vld(outDataRight_V_ap_vld)
);

biquadv2end_mul_2bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 51 ))
biquadv2end_mul_2bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_277_p0),
    .din1(grp_fu_277_p1),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_5_reg_240 <= resultRight_V_fu_811_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_5_reg_240 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_s_reg_253 <= resultLeft_V_reg_1083;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_reg_253 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_s_reg_266 <= i_V_reg_899;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_s_reg_266 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OP1_V_reg_934 <= OP1_V_fu_357_p1;
        tmp_26_reg_944 <= tmp_26_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Range1_all_ones_1_reg_1071 <= Range1_all_ones_1_fu_666_p2;
        Range1_all_zeros_1_reg_1078 <= Range1_all_zeros_1_fu_672_p2;
        Range2_all_ones_1_reg_1066 <= Range2_all_ones_1_fu_650_p2;
        brmerge40_demorgan_i_reg_1021 <= brmerge40_demorgan_i_fu_539_p2;
        brmerge_i_i_i_reg_1031 <= brmerge_i_i_i_fu_561_p2;
        carry_1_reg_1059 <= carry_1_fu_634_p2;
        newsignbit_1_reg_1053 <= p_Val2_9_fu_614_p2[32'd23];
        p_38_i_i_reg_1011 <= p_38_i_i_fu_513_p2;
        p_Val2_7_reg_1036 <= p_Val2_7_fu_579_p2;
        p_Val2_9_reg_1047 <= p_Val2_9_fu_614_p2;
        signbit_1_reg_1041 <= p_Val2_7_fu_579_p2[32'd50];
        tmp_9_reg_1016 <= tmp_9_fu_528_p2;
        underflow_reg_1026 <= underflow_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Range1_all_ones_reg_994 <= Range1_all_ones_fu_472_p2;
        Range1_all_zeros_reg_1001 <= Range1_all_zeros_fu_478_p2;
        Range2_all_ones_reg_989 <= Range2_all_ones_fu_456_p2;
        carry_reg_982 <= carry_fu_440_p2;
        newsignbit_reg_976 <= p_Val2_4_fu_420_p2[32'd23];
        p_Val2_2_reg_959 <= p_Val2_2_fu_385_p2;
        p_Val2_4_reg_970 <= p_Val2_4_fu_420_p2;
        signbit_reg_964 <= p_Val2_2_fu_385_p2[32'd50];
        tmp_28_reg_1006 <= grp_fu_277_p2[32'd23];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld)))) begin
        a1_a0_V_read_reg_876 <= a1_a0_V;
        a2_a0_V_read_reg_871 <= a2_a0_V;
        b2_a0_V_read_reg_881 <= b2_a0_V;
        inDataLeft_V_read_reg_866 <= inDataLeft_V;
        inDataRight_V_read_reg_861 <= inDataRight_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        array_load_4_reg_919 <= array_r_q1;
        tmp_20_reg_924 <= tmp_20_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        brmerge40_demorgan_i_1_reg_1098 <= brmerge40_demorgan_i_1_fu_762_p2;
        brmerge_i_i_i1_reg_1108 <= brmerge_i_i_i1_fu_784_p2;
        p_38_i_i1_reg_1088 <= p_38_i_i1_fu_736_p2;
        resultLeft_V_reg_1083 <= resultLeft_V_fu_699_p3;
        tmp_16_reg_1093 <= tmp_16_fu_751_p2;
        underflow_1_reg_1103 <= underflow_1_fu_779_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_V_reg_899 <= i_V_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inDataLeft_V_trunc_reg_886[23 : 0] <= inDataLeft_V_trunc_fu_303_p1[23 : 0];
        inDataRight_V_trunc_reg_891[23 : 0] <= inDataRight_V_trunc_fu_307_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_299 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_17_reg_1123 <= tmp_17_fu_823_p1;
        tmp_4_reg_1118 <= tmp_4_fu_819_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_18_reg_1128 <= tmp_18_fu_836_p1;
        tmp_19_reg_1133 <= tmp_19_fu_840_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_22_reg_949 <= grp_fu_277_p2[32'd23];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd0))) begin
        tmp_3_cast_reg_904[2 : 0] <= tmp_3_cast_fu_328_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        array_r_address0 = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        array_r_address0 = 4'd14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        array_r_address0 = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        array_r_address0 = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        array_r_address0 = 4'd13;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd1))) begin
        array_r_address0 = 4'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd0))) begin
        array_r_address0 = addr5_cast_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array_r_address0 = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array_r_address0 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address0 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_address0 = 4'd0;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        array_r_address1 = 4'd13;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        array_r_address1 = 4'd6;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state17))) begin
        array_r_address1 = 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        array_r_address1 = addr1_cast_fu_352_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd1)))) begin
        array_r_address1 = 4'd8;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd0))) begin
        array_r_address1 = tmp_3_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array_r_address1 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address1 = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_address1 = 4'd1;
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld))) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld))) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        array_r_d0 = samples_V_load_320_t_fu_857_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        array_r_d0 = samples_V_load_217_t_fu_848_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        array_r_d0 = samples_V_load_114_t_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        array_r_d0 = samples_V_load11_tru_fu_827_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array_r_d0 = inDataRight_V_trunc_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array_r_d0 = a2_a0_V_read_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_d0 = b2_a0_V_read_reg_881;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_d0 = b0_a0_V;
    end else begin
        array_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        array_r_d1 = inDataRight_V_trunc_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        array_r_d1 = p_Val2_5_trunc_fu_852_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        array_r_d1 = inDataLeft_V_trunc_reg_886;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        array_r_d1 = p_Val2_trunc_fu_831_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array_r_d1 = inDataLeft_V_trunc_fu_303_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_d1 = a1_a0_V_read_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_d1 = b1_a0_V;
    end else begin
        array_r_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld))) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17))) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld))) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17))) begin
        array_r_we1 = 1'b1;
    end else begin
        array_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_277_p0 = OP1_V_reg_934;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_277_p0 = OP1_V_fu_357_p1;
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_277_p1 = OP2_V_1_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_277_p1 = OP2_V_fu_361_p1;
    end else begin
        grp_fu_277_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld)))) begin
        inDataLeft_V_ap_ack = 1'b1;
    end else begin
        inDataLeft_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inDataLeft_V_blk_n = inDataLeft_V_ap_vld;
    end else begin
        inDataLeft_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld)))) begin
        inDataRight_V_ap_ack = 1'b1;
    end else begin
        inDataRight_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inDataRight_V_blk_n = inDataRight_V_ap_vld;
    end else begin
        inDataRight_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        outDataLeft_V_ap_vld = 1'b1;
    end else begin
        outDataLeft_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        outDataRight_V_ap_vld = 1'b1;
    end else begin
        outDataRight_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_fu_357_p1 = $signed(array_load_4_reg_919);

assign OP2_V_1_fu_369_p1 = $signed(tmp_26_reg_944);

assign OP2_V_fu_361_p1 = $signed(tmp_20_reg_924);

assign Range1_all_ones_1_fu_666_p2 = ((tmp_14_fu_656_p4 == 3'd7) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_472_p2 = ((tmp_7_fu_462_p4 == 3'd7) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_672_p2 = ((tmp_14_fu_656_p4 == 3'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_478_p2 = ((tmp_7_fu_462_p4 == 3'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_1_fu_650_p2 = ((tmp_13_fu_640_p4 == 2'd3) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_456_p2 = ((tmp_6_fu_446_p4 == 2'd3) ? 1'b1 : 1'b0);

assign addr1_cast_fu_352_p1 = addr1_fu_347_p2;

assign addr1_fu_347_p2 = (4'd10 + tmp_3_cast_reg_904);

assign addr5_cast_fu_338_p1 = addr5_fu_332_p2;

assign addr5_fu_332_p2 = (4'd5 + tmp_3_cast_fu_328_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (1'b0 == inDataRight_V_ap_vld) | (1'b0 == inDataLeft_V_ap_vld));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge40_demorgan_i_1_fu_762_p2 = (newsignbit_1_reg_1053 & deleted_ones_1_fu_730_p3);

assign brmerge40_demorgan_i_fu_539_p2 = (newsignbit_reg_976 & deleted_ones_fu_507_p3);

assign brmerge_i_i1_fu_746_p2 = (newsignbit_1_reg_1053 | p_not_i_i1_fu_740_p2);

assign brmerge_i_i_fu_523_p2 = (newsignbit_reg_976 | p_not_i_i_fu_517_p2);

assign brmerge_i_i_i1_fu_784_p2 = (underflow_1_fu_779_p2 | overflow_1_fu_756_p2);

assign brmerge_i_i_i_fu_561_p2 = (underflow_fu_556_p2 | overflow_fu_533_p2);

assign carry_1_fu_634_p2 = (tmp_29_fu_606_p3 & tmp_12_fu_628_p2);

assign carry_fu_440_p2 = (tmp_23_fu_412_p3 & tmp_s_fu_434_p2);

assign deleted_ones_1_fu_730_p3 = ((carry_1_reg_1059[0:0] === 1'b1) ? p_41_i_i1_fu_725_p2 : Range1_all_ones_1_reg_1071);

assign deleted_ones_fu_507_p3 = ((carry_reg_982[0:0] === 1'b1) ? p_41_i_i_fu_502_p2 : Range1_all_ones_reg_994);

assign deleted_zeros_1_fu_714_p3 = ((carry_1_reg_1059[0:0] === 1'b1) ? Range1_all_ones_1_reg_1071 : Range1_all_zeros_1_reg_1078);

assign deleted_zeros_fu_491_p3 = ((carry_reg_982[0:0] === 1'b1) ? Range1_all_ones_reg_994 : Range1_all_zeros_reg_1001);

assign i_V_fu_317_p2 = (p_s_reg_266 + 3'd1);

assign inDataLeft_V_trunc_fu_303_p1 = inDataLeft_V_read_reg_866;

assign inDataRight_V_trunc_fu_307_p1 = inDataRight_V_read_reg_861;

assign newsignbit_1_fu_620_p3 = p_Val2_9_fu_614_p2[32'd23];

assign newsignbit_fu_426_p3 = p_Val2_4_fu_420_p2[32'd23];

assign overflow_1_fu_756_p2 = (brmerge_i_i1_fu_746_p2 & tmp_16_fu_751_p2);

assign overflow_fu_533_p2 = (brmerge_i_i_fu_523_p2 & tmp_9_fu_528_p2);

assign p_38_i_i1_fu_736_p2 = (carry_1_reg_1059 & Range1_all_ones_1_reg_1071);

assign p_38_i_i_fu_513_p2 = (carry_reg_982 & Range1_all_ones_reg_994);

assign p_41_i_i1_fu_725_p2 = (Range2_all_ones_1_reg_1066 & tmp_15_fu_719_p2);

assign p_41_i_i_fu_502_p2 = (Range2_all_ones_reg_989 & tmp_1_fu_496_p2);

assign p_Val2_2_fu_385_p2 = ($signed(tmp_8_cast_fu_381_p1) + $signed(reg_299));

assign p_Val2_3_fu_399_p4 = {{p_Val2_2_fu_385_p2[47:24]}};

assign p_Val2_4_4_fu_693_p3 = ((underflow_reg_1026[0:0] === 1'b1) ? 24'd8388608 : p_Val2_4_reg_970);

assign p_Val2_4_fu_420_p2 = (p_Val2_3_fu_399_p4 + tmp_5_fu_409_p1);

assign p_Val2_4_mux_fu_687_p3 = ((brmerge_i_i_i_reg_1031[0:0] === 1'b1) ? 24'd8388607 : p_Val2_4_reg_970);

assign p_Val2_5_trunc_fu_852_p1 = p_Val2_5_reg_240;

assign p_Val2_7_fu_579_p2 = ($signed(tmp_13_cast_fu_575_p1) + $signed(reg_299));

assign p_Val2_8_fu_593_p4 = {{p_Val2_7_fu_579_p2[47:24]}};

assign p_Val2_9_5_fu_805_p3 = ((underflow_1_reg_1103[0:0] === 1'b1) ? 24'd8388608 : p_Val2_9_reg_1047);

assign p_Val2_9_fu_614_p2 = (p_Val2_8_fu_593_p4 + tmp_11_fu_603_p1);

assign p_Val2_9_mux_fu_799_p3 = ((brmerge_i_i_i1_reg_1108[0:0] === 1'b1) ? 24'd8388607 : p_Val2_9_reg_1047);

assign p_Val2_trunc_fu_831_p1 = p_Val2_s_reg_253;

assign p_not_i_i1_fu_740_p2 = (deleted_zeros_1_fu_714_p3 ^ 1'd1);

assign p_not_i_i_fu_517_p2 = (deleted_zeros_fu_491_p3 ^ 1'd1);

assign resultLeft_V_fu_699_p3 = ((underflow_not_fu_682_p2[0:0] === 1'b1) ? p_Val2_4_mux_fu_687_p3 : p_Val2_4_4_fu_693_p3);

assign resultRight_V_fu_811_p3 = ((underflow_1_not_fu_794_p2[0:0] === 1'b1) ? p_Val2_9_mux_fu_799_p3 : p_Val2_9_5_fu_805_p3);

assign samples_V_load11_tru_fu_827_p1 = tmp_4_reg_1118;

assign samples_V_load_114_t_fu_844_p1 = tmp_17_reg_1123;

assign samples_V_load_217_t_fu_848_p1 = tmp_18_reg_1128;

assign samples_V_load_320_t_fu_857_p1 = tmp_19_reg_1133;

assign tmp1_fu_678_p2 = (brmerge40_demorgan_i_reg_1021 | tmp_9_reg_1016);

assign tmp2_demorgan_fu_767_p2 = (p_38_i_i1_fu_736_p2 | brmerge40_demorgan_i_1_fu_762_p2);

assign tmp2_fu_773_p2 = (tmp2_demorgan_fu_767_p2 ^ 1'd1);

assign tmp3_fu_790_p2 = (brmerge40_demorgan_i_1_reg_1098 | tmp_16_reg_1093);

assign tmp_10_fu_567_p3 = {{p_Val2_5_reg_240}, {24'd0}};

assign tmp_11_fu_603_p1 = tmp_28_reg_1006;

assign tmp_12_fu_628_p2 = (newsignbit_1_fu_620_p3 ^ 1'd1);

assign tmp_13_cast_fu_575_p1 = $signed(tmp_10_fu_567_p3);

assign tmp_13_fu_640_p4 = {{p_Val2_7_fu_579_p2[50:49]}};

assign tmp_14_fu_656_p4 = {{p_Val2_7_fu_579_p2[50:48]}};

assign tmp_15_fu_719_p2 = (tmp_31_fu_707_p3 ^ 1'd1);

assign tmp_16_fu_751_p2 = (signbit_1_reg_1041 ^ 1'd1);

assign tmp_17_fu_823_p1 = array_r_q0[23:0];

assign tmp_18_fu_836_p1 = array_r_q0[23:0];

assign tmp_19_fu_840_p1 = array_r_q1[23:0];

assign tmp_1_fu_496_p2 = (tmp_25_fu_484_p3 ^ 1'd1);

assign tmp_20_fu_343_p1 = array_r_q0[23:0];

assign tmp_23_fu_412_p3 = p_Val2_2_fu_385_p2[32'd47];

assign tmp_25_fu_484_p3 = p_Val2_2_reg_959[32'd48];

assign tmp_26_fu_365_p1 = array_r_q1[23:0];

assign tmp_29_fu_606_p3 = p_Val2_7_fu_579_p2[32'd47];

assign tmp_2_fu_311_p2 = ((p_s_reg_266 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_31_fu_707_p3 = p_Val2_7_reg_1036[32'd48];

assign tmp_3_cast_fu_328_p1 = p_s_reg_266;

assign tmp_3_fu_323_p1 = p_s_reg_266;

assign tmp_4_fu_819_p1 = array_r_q1[23:0];

assign tmp_5_fu_409_p1 = tmp_22_reg_949;

assign tmp_6_fu_446_p4 = {{p_Val2_2_fu_385_p2[50:49]}};

assign tmp_7_fu_462_p4 = {{p_Val2_2_fu_385_p2[50:48]}};

assign tmp_8_cast_fu_381_p1 = $signed(tmp_8_fu_373_p3);

assign tmp_8_fu_373_p3 = {{p_Val2_s_reg_253}, {24'd0}};

assign tmp_9_fu_528_p2 = (signbit_reg_964 ^ 1'd1);

assign tmp_demorgan_fu_544_p2 = (p_38_i_i_fu_513_p2 | brmerge40_demorgan_i_fu_539_p2);

assign tmp_fu_550_p2 = (tmp_demorgan_fu_544_p2 ^ 1'd1);

assign tmp_s_fu_434_p2 = (newsignbit_fu_426_p3 ^ 1'd1);

assign underflow_1_fu_779_p2 = (signbit_1_reg_1041 & tmp2_fu_773_p2);

assign underflow_1_not_fu_794_p2 = (tmp3_fu_790_p2 | p_38_i_i1_reg_1088);

assign underflow_fu_556_p2 = (signbit_reg_964 & tmp_fu_550_p2);

assign underflow_not_fu_682_p2 = (tmp1_fu_678_p2 | p_38_i_i_reg_1011);

always @ (posedge ap_clk) begin
    inDataLeft_V_trunc_reg_886[26:24] <= 3'b000;
    inDataRight_V_trunc_reg_891[26:24] <= 3'b000;
    tmp_3_cast_reg_904[3] <= 1'b0;
end

endmodule //biquadv2end
