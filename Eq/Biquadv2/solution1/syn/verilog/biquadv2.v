// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="biquadv2,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.416000,HLS_SYN_LAT=40,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=1011,HLS_SYN_LUT=1041}" *)

module biquadv2 (
        ap_clk,
        ap_rst_n,
        s_axi_biquadv2_AWVALID,
        s_axi_biquadv2_AWREADY,
        s_axi_biquadv2_AWADDR,
        s_axi_biquadv2_WVALID,
        s_axi_biquadv2_WREADY,
        s_axi_biquadv2_WDATA,
        s_axi_biquadv2_WSTRB,
        s_axi_biquadv2_ARVALID,
        s_axi_biquadv2_ARREADY,
        s_axi_biquadv2_ARADDR,
        s_axi_biquadv2_RVALID,
        s_axi_biquadv2_RREADY,
        s_axi_biquadv2_RDATA,
        s_axi_biquadv2_RRESP,
        s_axi_biquadv2_BVALID,
        s_axi_biquadv2_BREADY,
        s_axi_biquadv2_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;
parameter    C_S_AXI_BIQUADV2_DATA_WIDTH = 32;
parameter    C_S_AXI_BIQUADV2_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BIQUADV2_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_biquadv2_AWVALID;
output   s_axi_biquadv2_AWREADY;
input  [C_S_AXI_BIQUADV2_ADDR_WIDTH - 1:0] s_axi_biquadv2_AWADDR;
input   s_axi_biquadv2_WVALID;
output   s_axi_biquadv2_WREADY;
input  [C_S_AXI_BIQUADV2_DATA_WIDTH - 1:0] s_axi_biquadv2_WDATA;
input  [C_S_AXI_BIQUADV2_WSTRB_WIDTH - 1:0] s_axi_biquadv2_WSTRB;
input   s_axi_biquadv2_ARVALID;
output   s_axi_biquadv2_ARREADY;
input  [C_S_AXI_BIQUADV2_ADDR_WIDTH - 1:0] s_axi_biquadv2_ARADDR;
output   s_axi_biquadv2_RVALID;
input   s_axi_biquadv2_RREADY;
output  [C_S_AXI_BIQUADV2_DATA_WIDTH - 1:0] s_axi_biquadv2_RDATA;
output  [1:0] s_axi_biquadv2_RRESP;
output   s_axi_biquadv2_BVALID;
input   s_axi_biquadv2_BREADY;
output  [1:0] s_axi_biquadv2_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [26:0] b0_a0_V;
wire   [26:0] b1_a0_V;
wire   [26:0] b2_a0_V;
wire   [26:0] a1_a0_V;
wire   [26:0] a2_a0_V;
wire   [23:0] inData_V;
reg    outData_V_ap_vld;
reg   [2:0] coeffs_V_address0;
reg    coeffs_V_ce0;
reg    coeffs_V_we0;
reg   [26:0] coeffs_V_d0;
reg   [2:0] coeffs_V_address1;
reg    coeffs_V_ce1;
reg    coeffs_V_we1;
reg   [26:0] coeffs_V_d1;
wire   [26:0] coeffs_V_q1;
reg   [2:0] samples_V_address0;
reg    samples_V_ce0;
reg    samples_V_we0;
reg   [23:0] samples_V_d0;
wire   [23:0] samples_V_q0;
reg   [2:0] samples_V_address1;
reg    samples_V_ce1;
reg    samples_V_we1;
reg   [23:0] samples_V_d1;
wire   [23:0] samples_V_q1;
reg  signed [23:0] reg_218;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state11;
reg   [23:0] inData_V_read_reg_485;
reg   [26:0] a2_a0_V_read_reg_490;
reg   [26:0] a1_a0_V_read_reg_495;
reg   [26:0] b2_a0_V_read_reg_500;
wire   [2:0] i_V_fu_230_p2;
reg   [2:0] i_V_reg_508;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_1_fu_224_p2;
reg  signed [26:0] coeffs_V_load_reg_523;
wire    ap_CS_fsm_state6;
wire   [50:0] grp_fu_249_p2;
reg   [50:0] p_Val2_1_reg_538;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_10_reg_543;
wire   [50:0] p_Val2_2_fu_275_p2;
reg   [50:0] p_Val2_2_reg_548;
wire    ap_CS_fsm_state8;
reg   [0:0] signbit_reg_553;
wire   [23:0] p_Val2_4_fu_309_p2;
reg   [23:0] p_Val2_4_reg_559;
wire   [0:0] newsignbit_fu_315_p3;
reg   [0:0] newsignbit_reg_565;
wire   [0:0] carry_fu_329_p2;
reg   [0:0] carry_reg_571;
wire   [0:0] Range2_all_ones_fu_345_p2;
reg   [0:0] Range2_all_ones_reg_578;
wire   [0:0] Range1_all_ones_fu_361_p2;
reg   [0:0] Range1_all_ones_reg_583;
wire   [0:0] Range1_all_zeros_fu_367_p2;
reg   [0:0] Range1_all_zeros_reg_590;
wire   [0:0] p_38_i_i_fu_402_p2;
reg   [0:0] p_38_i_i_reg_595;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_9_fu_417_p2;
reg   [0:0] tmp_9_reg_600;
wire   [0:0] brmerge40_demorgan_i_fu_428_p2;
reg   [0:0] brmerge40_demorgan_i_reg_605;
wire   [0:0] underflow_fu_445_p2;
reg   [0:0] underflow_reg_610;
wire   [0:0] brmerge_i_i_i_fu_450_p2;
reg   [0:0] brmerge_i_i_i_reg_615;
wire   [23:0] result_V_fu_477_p3;
wire    ap_CS_fsm_state10;
reg   [23:0] p_Val2_s_reg_193;
wire    ap_CS_fsm_state3;
reg   [2:0] p_s_reg_207;
wire   [31:0] tmp_2_fu_236_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state2;
wire   [47:0] tmp_7_fu_263_p3;
wire  signed [50:0] tmp_7_cast_fu_271_p1;
wire   [23:0] p_Val2_3_fu_288_p4;
wire   [23:0] tmp_4_fu_298_p1;
wire   [0:0] tmp_11_fu_301_p3;
wire   [0:0] tmp_s_fu_323_p2;
wire   [1:0] tmp_6_fu_335_p4;
wire   [2:0] tmp_8_fu_351_p4;
wire   [0:0] tmp_13_fu_373_p3;
wire   [0:0] tmp_5_fu_385_p2;
wire   [0:0] p_41_i_i_fu_391_p2;
wire   [0:0] deleted_zeros_fu_380_p3;
wire   [0:0] p_not_i_i_fu_406_p2;
wire   [0:0] brmerge_i_i_fu_412_p2;
wire   [0:0] deleted_ones_fu_396_p3;
wire   [0:0] tmp_demorgan_fu_433_p2;
wire   [0:0] tmp_fu_439_p2;
wire   [0:0] overflow_fu_422_p2;
wire   [0:0] tmp1_fu_456_p2;
wire   [0:0] underflow_not_fu_460_p2;
wire   [23:0] p_Val2_4_mux_fu_465_p3;
wire   [23:0] p_Val2_4_4_fu_471_p3;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

biquadv2_coeffs_V #(
    .DataWidth( 27 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
coeffs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(coeffs_V_address0),
    .ce0(coeffs_V_ce0),
    .we0(coeffs_V_we0),
    .d0(coeffs_V_d0),
    .address1(coeffs_V_address1),
    .ce1(coeffs_V_ce1),
    .we1(coeffs_V_we1),
    .d1(coeffs_V_d1),
    .q1(coeffs_V_q1)
);

biquadv2_samples_V #(
    .DataWidth( 24 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
samples_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(samples_V_address0),
    .ce0(samples_V_ce0),
    .we0(samples_V_we0),
    .d0(samples_V_d0),
    .q0(samples_V_q0),
    .address1(samples_V_address1),
    .ce1(samples_V_ce1),
    .we1(samples_V_we1),
    .d1(samples_V_d1),
    .q1(samples_V_q1)
);

biquadv2_biquadv2_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BIQUADV2_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BIQUADV2_DATA_WIDTH ))
biquadv2_biquadv2_s_axi_U(
    .AWVALID(s_axi_biquadv2_AWVALID),
    .AWREADY(s_axi_biquadv2_AWREADY),
    .AWADDR(s_axi_biquadv2_AWADDR),
    .WVALID(s_axi_biquadv2_WVALID),
    .WREADY(s_axi_biquadv2_WREADY),
    .WDATA(s_axi_biquadv2_WDATA),
    .WSTRB(s_axi_biquadv2_WSTRB),
    .ARVALID(s_axi_biquadv2_ARVALID),
    .ARREADY(s_axi_biquadv2_ARREADY),
    .ARADDR(s_axi_biquadv2_ARADDR),
    .RVALID(s_axi_biquadv2_RVALID),
    .RREADY(s_axi_biquadv2_RREADY),
    .RDATA(s_axi_biquadv2_RDATA),
    .RRESP(s_axi_biquadv2_RRESP),
    .BVALID(s_axi_biquadv2_BVALID),
    .BREADY(s_axi_biquadv2_BREADY),
    .BRESP(s_axi_biquadv2_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .b0_a0_V(b0_a0_V),
    .b1_a0_V(b1_a0_V),
    .b2_a0_V(b2_a0_V),
    .a1_a0_V(a1_a0_V),
    .a2_a0_V(a2_a0_V),
    .inData_V(inData_V),
    .outData_V(p_Val2_s_reg_193),
    .outData_V_ap_vld(outData_V_ap_vld)
);

biquadv2_mul_27s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 51 ))
biquadv2_mul_27s_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(coeffs_V_load_reg_523),
    .din1(reg_218),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_s_reg_193 <= result_V_fu_477_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_s_reg_193 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_s_reg_207 <= i_V_reg_508;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_s_reg_207 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_218 <= samples_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_218 <= samples_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        Range1_all_ones_reg_583 <= Range1_all_ones_fu_361_p2;
        Range1_all_zeros_reg_590 <= Range1_all_zeros_fu_367_p2;
        Range2_all_ones_reg_578 <= Range2_all_ones_fu_345_p2;
        carry_reg_571 <= carry_fu_329_p2;
        newsignbit_reg_565 <= p_Val2_4_fu_309_p2[32'd23];
        p_Val2_2_reg_548 <= p_Val2_2_fu_275_p2;
        p_Val2_4_reg_559 <= p_Val2_4_fu_309_p2;
        signbit_reg_553 <= p_Val2_2_fu_275_p2[32'd50];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a1_a0_V_read_reg_495 <= a1_a0_V;
        a2_a0_V_read_reg_490 <= a2_a0_V;
        b2_a0_V_read_reg_500 <= b2_a0_V;
        inData_V_read_reg_485 <= inData_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        brmerge40_demorgan_i_reg_605 <= brmerge40_demorgan_i_fu_428_p2;
        brmerge_i_i_i_reg_615 <= brmerge_i_i_i_fu_450_p2;
        p_38_i_i_reg_595 <= p_38_i_i_fu_402_p2;
        tmp_9_reg_600 <= tmp_9_fu_417_p2;
        underflow_reg_610 <= underflow_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        coeffs_V_load_reg_523 <= coeffs_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_508 <= i_V_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_1_reg_538 <= grp_fu_249_p2;
        tmp_10_reg_543 <= grp_fu_249_p2[32'd23];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coeffs_V_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        coeffs_V_address0 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeffs_V_address0 = 3'd0;
    end else begin
        coeffs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coeffs_V_address1 = tmp_2_fu_236_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        coeffs_V_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeffs_V_address1 = 3'd1;
    end else begin
        coeffs_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        coeffs_V_ce0 = 1'b1;
    end else begin
        coeffs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        coeffs_V_ce1 = 1'b1;
    end else begin
        coeffs_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coeffs_V_d0 = a2_a0_V_read_reg_490;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        coeffs_V_d0 = b2_a0_V_read_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeffs_V_d0 = b0_a0_V;
    end else begin
        coeffs_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        coeffs_V_d1 = a1_a0_V_read_reg_495;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeffs_V_d1 = b1_a0_V;
    end else begin
        coeffs_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        coeffs_V_we0 = 1'b1;
    end else begin
        coeffs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2))) begin
        coeffs_V_we1 = 1'b1;
    end else begin
        coeffs_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        outData_V_ap_vld = 1'b1;
    end else begin
        outData_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        samples_V_address0 = 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_224_p2 == 1'd1)))) begin
        samples_V_address0 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_224_p2 == 1'd0))) begin
        samples_V_address0 = tmp_2_fu_236_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        samples_V_address0 = 3'd0;
    end else begin
        samples_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        samples_V_address1 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        samples_V_address1 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        samples_V_address1 = 3'd1;
    end else begin
        samples_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_224_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_224_p2 == 1'd1)))) begin
        samples_V_ce0 = 1'b1;
    end else begin
        samples_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        samples_V_ce1 = 1'b1;
    end else begin
        samples_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        samples_V_d0 = p_Val2_s_reg_193;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12))) begin
        samples_V_d0 = inData_V_read_reg_485;
    end else begin
        samples_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        samples_V_d1 = reg_218;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        samples_V_d1 = samples_V_q0;
    end else begin
        samples_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12))) begin
        samples_V_we0 = 1'b1;
    end else begin
        samples_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        samples_V_we1 = 1'b1;
    end else begin
        samples_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_361_p2 = ((tmp_8_fu_351_p4 == 3'd7) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_367_p2 = ((tmp_8_fu_351_p4 == 3'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_345_p2 = ((tmp_6_fu_335_p4 == 2'd3) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge40_demorgan_i_fu_428_p2 = (newsignbit_reg_565 & deleted_ones_fu_396_p3);

assign brmerge_i_i_fu_412_p2 = (newsignbit_reg_565 | p_not_i_i_fu_406_p2);

assign brmerge_i_i_i_fu_450_p2 = (underflow_fu_445_p2 | overflow_fu_422_p2);

assign carry_fu_329_p2 = (tmp_11_fu_301_p3 & tmp_s_fu_323_p2);

assign deleted_ones_fu_396_p3 = ((carry_reg_571[0:0] === 1'b1) ? p_41_i_i_fu_391_p2 : Range1_all_ones_reg_583);

assign deleted_zeros_fu_380_p3 = ((carry_reg_571[0:0] === 1'b1) ? Range1_all_ones_reg_583 : Range1_all_zeros_reg_590);

assign i_V_fu_230_p2 = (p_s_reg_207 + 3'd1);

assign newsignbit_fu_315_p3 = p_Val2_4_fu_309_p2[32'd23];

assign overflow_fu_422_p2 = (brmerge_i_i_fu_412_p2 & tmp_9_fu_417_p2);

assign p_38_i_i_fu_402_p2 = (carry_reg_571 & Range1_all_ones_reg_583);

assign p_41_i_i_fu_391_p2 = (Range2_all_ones_reg_578 & tmp_5_fu_385_p2);

assign p_Val2_2_fu_275_p2 = ($signed(tmp_7_cast_fu_271_p1) + $signed(p_Val2_1_reg_538));

assign p_Val2_3_fu_288_p4 = {{p_Val2_2_fu_275_p2[47:24]}};

assign p_Val2_4_4_fu_471_p3 = ((underflow_reg_610[0:0] === 1'b1) ? 24'd8388608 : p_Val2_4_reg_559);

assign p_Val2_4_fu_309_p2 = (p_Val2_3_fu_288_p4 + tmp_4_fu_298_p1);

assign p_Val2_4_mux_fu_465_p3 = ((brmerge_i_i_i_reg_615[0:0] === 1'b1) ? 24'd8388607 : p_Val2_4_reg_559);

assign p_not_i_i_fu_406_p2 = (deleted_zeros_fu_380_p3 ^ 1'd1);

assign result_V_fu_477_p3 = ((underflow_not_fu_460_p2[0:0] === 1'b1) ? p_Val2_4_mux_fu_465_p3 : p_Val2_4_4_fu_471_p3);

assign tmp1_fu_456_p2 = (brmerge40_demorgan_i_reg_605 | tmp_9_reg_600);

assign tmp_11_fu_301_p3 = p_Val2_2_fu_275_p2[32'd47];

assign tmp_13_fu_373_p3 = p_Val2_2_reg_548[32'd48];

assign tmp_1_fu_224_p2 = ((p_s_reg_207 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_2_fu_236_p1 = p_s_reg_207;

assign tmp_4_fu_298_p1 = tmp_10_reg_543;

assign tmp_5_fu_385_p2 = (tmp_13_fu_373_p3 ^ 1'd1);

assign tmp_6_fu_335_p4 = {{p_Val2_2_fu_275_p2[50:49]}};

assign tmp_7_cast_fu_271_p1 = $signed(tmp_7_fu_263_p3);

assign tmp_7_fu_263_p3 = {{p_Val2_s_reg_193}, {24'd0}};

assign tmp_8_fu_351_p4 = {{p_Val2_2_fu_275_p2[50:48]}};

assign tmp_9_fu_417_p2 = (signbit_reg_553 ^ 1'd1);

assign tmp_demorgan_fu_433_p2 = (p_38_i_i_fu_402_p2 | brmerge40_demorgan_i_fu_428_p2);

assign tmp_fu_439_p2 = (tmp_demorgan_fu_433_p2 ^ 1'd1);

assign tmp_s_fu_323_p2 = (newsignbit_fu_315_p3 ^ 1'd1);

assign underflow_fu_445_p2 = (signbit_reg_553 & tmp_fu_439_p2);

assign underflow_not_fu_460_p2 = (tmp1_fu_456_p2 | p_38_i_i_reg_595);

endmodule //biquadv2
