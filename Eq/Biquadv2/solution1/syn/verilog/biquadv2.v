// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="biquadv2,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=38,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=759,HLS_SYN_LUT=606}" *)

module biquadv2 (
        ap_clk,
        ap_rst_n,
        s_axi_biquadv2_AWVALID,
        s_axi_biquadv2_AWREADY,
        s_axi_biquadv2_AWADDR,
        s_axi_biquadv2_WVALID,
        s_axi_biquadv2_WREADY,
        s_axi_biquadv2_WDATA,
        s_axi_biquadv2_WSTRB,
        s_axi_biquadv2_ARVALID,
        s_axi_biquadv2_ARREADY,
        s_axi_biquadv2_ARADDR,
        s_axi_biquadv2_RVALID,
        s_axi_biquadv2_RREADY,
        s_axi_biquadv2_RDATA,
        s_axi_biquadv2_RRESP,
        s_axi_biquadv2_BVALID,
        s_axi_biquadv2_BREADY,
        s_axi_biquadv2_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_BIQUADV2_DATA_WIDTH = 32;
parameter    C_S_AXI_BIQUADV2_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BIQUADV2_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_biquadv2_AWVALID;
output   s_axi_biquadv2_AWREADY;
input  [C_S_AXI_BIQUADV2_ADDR_WIDTH - 1:0] s_axi_biquadv2_AWADDR;
input   s_axi_biquadv2_WVALID;
output   s_axi_biquadv2_WREADY;
input  [C_S_AXI_BIQUADV2_DATA_WIDTH - 1:0] s_axi_biquadv2_WDATA;
input  [C_S_AXI_BIQUADV2_WSTRB_WIDTH - 1:0] s_axi_biquadv2_WSTRB;
input   s_axi_biquadv2_ARVALID;
output   s_axi_biquadv2_ARREADY;
input  [C_S_AXI_BIQUADV2_ADDR_WIDTH - 1:0] s_axi_biquadv2_ARADDR;
output   s_axi_biquadv2_RVALID;
input   s_axi_biquadv2_RREADY;
output  [C_S_AXI_BIQUADV2_DATA_WIDTH - 1:0] s_axi_biquadv2_RDATA;
output  [1:0] s_axi_biquadv2_RRESP;
output   s_axi_biquadv2_BVALID;
input   s_axi_biquadv2_BREADY;
output  [1:0] s_axi_biquadv2_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [23:0] inData_V;
reg    outData_V_ap_vld;
wire   [2:0] coeffs_address0;
reg    coeffs_ce0;
wire   [25:0] coeffs_q0;
reg   [2:0] samples_V_address0;
reg    samples_V_ce0;
reg    samples_V_we0;
reg   [23:0] samples_V_d0;
wire   [23:0] samples_V_q0;
reg   [2:0] samples_V_address1;
reg    samples_V_ce1;
reg    samples_V_we1;
reg   [23:0] samples_V_d1;
wire   [23:0] samples_V_q1;
reg  signed [23:0] reg_155;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
reg   [23:0] inData_V_read_reg_412;
wire   [2:0] i_V_fu_167_p2;
reg   [2:0] i_V_reg_420;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_5_fu_161_p2;
reg  signed [25:0] coeffs_load_reg_435;
wire    ap_CS_fsm_state4;
wire   [48:0] grp_fu_186_p2;
reg   [48:0] p_Val2_1_reg_450;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_8_reg_455;
wire   [49:0] p_Val2_2_fu_215_p2;
reg   [49:0] p_Val2_2_reg_460;
wire    ap_CS_fsm_state6;
reg   [0:0] signbit_reg_465;
wire   [23:0] p_Val2_4_fu_250_p2;
reg   [23:0] p_Val2_4_reg_472;
wire   [0:0] newsignbit_fu_256_p3;
reg   [0:0] newsignbit_reg_478;
wire   [0:0] carry_fu_270_p2;
reg   [0:0] carry_reg_484;
reg   [1:0] tmp_9_reg_491;
wire   [0:0] p_38_i_i_fu_328_p2;
reg   [0:0] p_38_i_i_reg_497;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_s_fu_344_p2;
reg   [0:0] tmp_s_reg_502;
wire   [0:0] brmerge40_demorgan_i_fu_355_p2;
reg   [0:0] brmerge40_demorgan_i_reg_507;
wire   [0:0] underflow_fu_372_p2;
reg   [0:0] underflow_reg_512;
wire   [0:0] brmerge_i_i_i_fu_377_p2;
reg   [0:0] brmerge_i_i_i_reg_517;
wire   [23:0] result_V_fu_404_p3;
wire    ap_CS_fsm_state8;
reg   [23:0] p_Val2_s_reg_130;
reg   [2:0] p_0_reg_144;
wire   [31:0] tmp_6_fu_173_p1;
wire    ap_CS_fsm_state10;
wire   [47:0] tmp_7_fu_200_p3;
wire  signed [49:0] tmp_8_cast_fu_212_p1;
wire  signed [49:0] tmp_7_cast_fu_208_p1;
wire   [23:0] tmp_2_fu_239_p1;
wire   [23:0] p_Val2_3_fu_229_p4;
wire   [0:0] tmp_10_fu_242_p3;
wire   [0:0] tmp_3_fu_264_p2;
wire   [0:0] Range1_all_ones_fu_293_p2;
wire   [0:0] Range1_all_zeros_fu_298_p2;
wire   [0:0] tmp_12_fu_286_p3;
wire   [0:0] tmp_4_fu_310_p2;
wire   [0:0] p_41_i_i_fu_316_p2;
wire   [0:0] deleted_zeros_fu_303_p3;
wire   [0:0] p_not_i_i_fu_333_p2;
wire   [0:0] brmerge_i_i_fu_339_p2;
wire   [0:0] deleted_ones_fu_321_p3;
wire   [0:0] tmp_demorgan_fu_360_p2;
wire   [0:0] tmp_fu_366_p2;
wire   [0:0] overflow_fu_349_p2;
wire   [0:0] tmp1_fu_383_p2;
wire   [0:0] underflow_not_fu_387_p2;
wire   [23:0] p_Val2_4_mux_fu_392_p3;
wire   [23:0] p_Val2_4_4_fu_398_p3;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

biquadv2_coeffs #(
    .DataWidth( 26 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(coeffs_address0),
    .ce0(coeffs_ce0),
    .q0(coeffs_q0)
);

biquadv2_samples_V #(
    .DataWidth( 24 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
samples_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(samples_V_address0),
    .ce0(samples_V_ce0),
    .we0(samples_V_we0),
    .d0(samples_V_d0),
    .q0(samples_V_q0),
    .address1(samples_V_address1),
    .ce1(samples_V_ce1),
    .we1(samples_V_we1),
    .d1(samples_V_d1),
    .q1(samples_V_q1)
);

biquadv2_biquadv2_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BIQUADV2_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BIQUADV2_DATA_WIDTH ))
biquadv2_biquadv2_s_axi_U(
    .AWVALID(s_axi_biquadv2_AWVALID),
    .AWREADY(s_axi_biquadv2_AWREADY),
    .AWADDR(s_axi_biquadv2_AWADDR),
    .WVALID(s_axi_biquadv2_WVALID),
    .WREADY(s_axi_biquadv2_WREADY),
    .WDATA(s_axi_biquadv2_WDATA),
    .WSTRB(s_axi_biquadv2_WSTRB),
    .ARVALID(s_axi_biquadv2_ARVALID),
    .ARREADY(s_axi_biquadv2_ARREADY),
    .ARADDR(s_axi_biquadv2_ARADDR),
    .RVALID(s_axi_biquadv2_RVALID),
    .RREADY(s_axi_biquadv2_RREADY),
    .RDATA(s_axi_biquadv2_RDATA),
    .RRESP(s_axi_biquadv2_RRESP),
    .BVALID(s_axi_biquadv2_BVALID),
    .BREADY(s_axi_biquadv2_BREADY),
    .BRESP(s_axi_biquadv2_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inData_V(inData_V),
    .outData_V(p_Val2_s_reg_130),
    .outData_V_ap_vld(outData_V_ap_vld)
);

biquadv2_mul_24s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 49 ))
biquadv2_mul_24s_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_155),
    .din1(coeffs_load_reg_435),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_0_reg_144 <= i_V_reg_420;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_reg_144 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_s_reg_130 <= result_V_fu_404_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_130 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_155 <= samples_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_155 <= samples_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        brmerge40_demorgan_i_reg_507 <= brmerge40_demorgan_i_fu_355_p2;
        brmerge_i_i_i_reg_517 <= brmerge_i_i_i_fu_377_p2;
        p_38_i_i_reg_497 <= p_38_i_i_fu_328_p2;
        tmp_s_reg_502 <= tmp_s_fu_344_p2;
        underflow_reg_512 <= underflow_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        carry_reg_484 <= carry_fu_270_p2;
        newsignbit_reg_478 <= p_Val2_4_fu_250_p2[32'd23];
        p_Val2_2_reg_460 <= p_Val2_2_fu_215_p2;
        p_Val2_4_reg_472 <= p_Val2_4_fu_250_p2;
        signbit_reg_465 <= p_Val2_2_fu_215_p2[32'd49];
        tmp_9_reg_491 <= {{p_Val2_2_fu_215_p2[49:48]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coeffs_load_reg_435 <= coeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_420 <= i_V_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inData_V_read_reg_412 <= inData_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_1_reg_450 <= grp_fu_186_p2;
        tmp_8_reg_455 <= grp_fu_186_p2[32'd23];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        coeffs_ce0 = 1'b1;
    end else begin
        coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        outData_V_ap_vld = 1'b1;
    end else begin
        outData_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        samples_V_address0 = 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_161_p2 == 1'd1)))) begin
        samples_V_address0 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_161_p2 == 1'd0))) begin
        samples_V_address0 = tmp_6_fu_173_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        samples_V_address0 = 3'd0;
    end else begin
        samples_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        samples_V_address1 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        samples_V_address1 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        samples_V_address1 = 3'd1;
    end else begin
        samples_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_161_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_161_p2 == 1'd1)))) begin
        samples_V_ce0 = 1'b1;
    end else begin
        samples_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        samples_V_ce1 = 1'b1;
    end else begin
        samples_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        samples_V_d0 = inData_V_read_reg_412;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        samples_V_d0 = p_Val2_s_reg_130;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        samples_V_d0 = inData_V;
    end else begin
        samples_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        samples_V_d1 = reg_155;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        samples_V_d1 = samples_V_q0;
    end else begin
        samples_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state10))) begin
        samples_V_we0 = 1'b1;
    end else begin
        samples_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        samples_V_we1 = 1'b1;
    end else begin
        samples_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_161_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_293_p2 = ((tmp_9_reg_491 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_298_p2 = ((tmp_9_reg_491 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge40_demorgan_i_fu_355_p2 = (newsignbit_reg_478 & deleted_ones_fu_321_p3);

assign brmerge_i_i_fu_339_p2 = (newsignbit_reg_478 | p_not_i_i_fu_333_p2);

assign brmerge_i_i_i_fu_377_p2 = (underflow_fu_372_p2 | overflow_fu_349_p2);

assign carry_fu_270_p2 = (tmp_10_fu_242_p3 & tmp_3_fu_264_p2);

assign coeffs_address0 = tmp_6_fu_173_p1;

assign deleted_ones_fu_321_p3 = ((carry_reg_484[0:0] === 1'b1) ? p_41_i_i_fu_316_p2 : Range1_all_ones_fu_293_p2);

assign deleted_zeros_fu_303_p3 = ((carry_reg_484[0:0] === 1'b1) ? Range1_all_ones_fu_293_p2 : Range1_all_zeros_fu_298_p2);

assign i_V_fu_167_p2 = (p_0_reg_144 + 3'd1);

assign newsignbit_fu_256_p3 = p_Val2_4_fu_250_p2[32'd23];

assign overflow_fu_349_p2 = (brmerge_i_i_fu_339_p2 & tmp_s_fu_344_p2);

assign p_38_i_i_fu_328_p2 = (carry_reg_484 & Range1_all_ones_fu_293_p2);

assign p_41_i_i_fu_316_p2 = (signbit_reg_465 & tmp_4_fu_310_p2);

assign p_Val2_2_fu_215_p2 = ($signed(tmp_8_cast_fu_212_p1) + $signed(tmp_7_cast_fu_208_p1));

assign p_Val2_3_fu_229_p4 = {{p_Val2_2_fu_215_p2[47:24]}};

assign p_Val2_4_4_fu_398_p3 = ((underflow_reg_512[0:0] === 1'b1) ? 24'd8388608 : p_Val2_4_reg_472);

assign p_Val2_4_fu_250_p2 = (tmp_2_fu_239_p1 + p_Val2_3_fu_229_p4);

assign p_Val2_4_mux_fu_392_p3 = ((brmerge_i_i_i_reg_517[0:0] === 1'b1) ? 24'd8388607 : p_Val2_4_reg_472);

assign p_not_i_i_fu_333_p2 = (deleted_zeros_fu_303_p3 ^ 1'd1);

assign result_V_fu_404_p3 = ((underflow_not_fu_387_p2[0:0] === 1'b1) ? p_Val2_4_mux_fu_392_p3 : p_Val2_4_4_fu_398_p3);

assign tmp1_fu_383_p2 = (brmerge40_demorgan_i_reg_507 | tmp_s_reg_502);

assign tmp_10_fu_242_p3 = p_Val2_2_fu_215_p2[32'd47];

assign tmp_12_fu_286_p3 = p_Val2_2_reg_460[32'd48];

assign tmp_2_fu_239_p1 = tmp_8_reg_455;

assign tmp_3_fu_264_p2 = (newsignbit_fu_256_p3 ^ 1'd1);

assign tmp_4_fu_310_p2 = (tmp_12_fu_286_p3 ^ 1'd1);

assign tmp_5_fu_161_p2 = ((p_0_reg_144 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_6_fu_173_p1 = p_0_reg_144;

assign tmp_7_cast_fu_208_p1 = $signed(tmp_7_fu_200_p3);

assign tmp_7_fu_200_p3 = {{p_Val2_s_reg_130}, {24'd0}};

assign tmp_8_cast_fu_212_p1 = $signed(p_Val2_1_reg_450);

assign tmp_demorgan_fu_360_p2 = (p_38_i_i_fu_328_p2 | brmerge40_demorgan_i_fu_355_p2);

assign tmp_fu_366_p2 = (tmp_demorgan_fu_360_p2 ^ 1'd1);

assign tmp_s_fu_344_p2 = (signbit_reg_465 ^ 1'd1);

assign underflow_fu_372_p2 = (signbit_reg_465 & tmp_fu_366_p2);

assign underflow_not_fu_387_p2 = (tmp1_fu_383_p2 | p_38_i_i_reg_497);

endmodule //biquadv2
