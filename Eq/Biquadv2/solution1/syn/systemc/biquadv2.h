// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _biquadv2_HH_
#define _biquadv2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "biquadv2_mul_24s_bkb.h"
#include "biquadv2_coeffs.h"
#include "biquadv2_samples_V.h"
#include "biquadv2_biquadv2_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_BIQUADV2_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_BIQUADV2_DATA_WIDTH = 32>
struct biquadv2 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_biquadv2_AWVALID;
    sc_out< sc_logic > s_axi_biquadv2_AWREADY;
    sc_in< sc_uint<C_S_AXI_BIQUADV2_ADDR_WIDTH> > s_axi_biquadv2_AWADDR;
    sc_in< sc_logic > s_axi_biquadv2_WVALID;
    sc_out< sc_logic > s_axi_biquadv2_WREADY;
    sc_in< sc_uint<C_S_AXI_BIQUADV2_DATA_WIDTH> > s_axi_biquadv2_WDATA;
    sc_in< sc_uint<C_S_AXI_BIQUADV2_DATA_WIDTH/8> > s_axi_biquadv2_WSTRB;
    sc_in< sc_logic > s_axi_biquadv2_ARVALID;
    sc_out< sc_logic > s_axi_biquadv2_ARREADY;
    sc_in< sc_uint<C_S_AXI_BIQUADV2_ADDR_WIDTH> > s_axi_biquadv2_ARADDR;
    sc_out< sc_logic > s_axi_biquadv2_RVALID;
    sc_in< sc_logic > s_axi_biquadv2_RREADY;
    sc_out< sc_uint<C_S_AXI_BIQUADV2_DATA_WIDTH> > s_axi_biquadv2_RDATA;
    sc_out< sc_lv<2> > s_axi_biquadv2_RRESP;
    sc_out< sc_logic > s_axi_biquadv2_BVALID;
    sc_in< sc_logic > s_axi_biquadv2_BREADY;
    sc_out< sc_lv<2> > s_axi_biquadv2_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    biquadv2(sc_module_name name);
    SC_HAS_PROCESS(biquadv2);

    ~biquadv2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    biquadv2_coeffs* coeffs_U;
    biquadv2_samples_V* samples_V_U;
    biquadv2_biquadv2_s_axi<C_S_AXI_BIQUADV2_ADDR_WIDTH,C_S_AXI_BIQUADV2_DATA_WIDTH>* biquadv2_biquadv2_s_axi_U;
    biquadv2_mul_24s_bkb<1,2,24,26,49>* biquadv2_mul_24s_bkb_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<24> > inData_V;
    sc_signal< sc_logic > outData_V_ap_vld;
    sc_signal< sc_lv<3> > coeffs_address0;
    sc_signal< sc_logic > coeffs_ce0;
    sc_signal< sc_lv<26> > coeffs_q0;
    sc_signal< sc_lv<3> > samples_V_address0;
    sc_signal< sc_logic > samples_V_ce0;
    sc_signal< sc_logic > samples_V_we0;
    sc_signal< sc_lv<24> > samples_V_d0;
    sc_signal< sc_lv<24> > samples_V_q0;
    sc_signal< sc_lv<3> > samples_V_address1;
    sc_signal< sc_logic > samples_V_ce1;
    sc_signal< sc_logic > samples_V_we1;
    sc_signal< sc_lv<24> > samples_V_d1;
    sc_signal< sc_lv<24> > samples_V_q1;
    sc_signal< sc_lv<24> > reg_155;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<24> > inData_V_read_reg_412;
    sc_signal< sc_lv<3> > i_V_fu_167_p2;
    sc_signal< sc_lv<3> > i_V_reg_420;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_5_fu_161_p2;
    sc_signal< sc_lv<26> > coeffs_load_reg_435;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<49> > grp_fu_186_p2;
    sc_signal< sc_lv<49> > p_Val2_1_reg_450;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_8_reg_455;
    sc_signal< sc_lv<50> > p_Val2_2_fu_215_p2;
    sc_signal< sc_lv<50> > p_Val2_2_reg_460;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > signbit_reg_465;
    sc_signal< sc_lv<24> > p_Val2_4_fu_250_p2;
    sc_signal< sc_lv<24> > p_Val2_4_reg_472;
    sc_signal< sc_lv<1> > newsignbit_fu_256_p3;
    sc_signal< sc_lv<1> > newsignbit_reg_478;
    sc_signal< sc_lv<1> > carry_fu_270_p2;
    sc_signal< sc_lv<1> > carry_reg_484;
    sc_signal< sc_lv<2> > tmp_9_reg_491;
    sc_signal< sc_lv<1> > p_38_i_i_fu_328_p2;
    sc_signal< sc_lv<1> > p_38_i_i_reg_497;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > tmp_s_fu_344_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_502;
    sc_signal< sc_lv<1> > brmerge40_demorgan_i_fu_355_p2;
    sc_signal< sc_lv<1> > brmerge40_demorgan_i_reg_507;
    sc_signal< sc_lv<1> > underflow_fu_372_p2;
    sc_signal< sc_lv<1> > underflow_reg_512;
    sc_signal< sc_lv<1> > brmerge_i_i_i_fu_377_p2;
    sc_signal< sc_lv<1> > brmerge_i_i_i_reg_517;
    sc_signal< sc_lv<24> > result_V_fu_404_p3;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<24> > p_Val2_s_reg_130;
    sc_signal< sc_lv<3> > p_0_reg_144;
    sc_signal< sc_lv<32> > tmp_6_fu_173_p1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<48> > tmp_7_fu_200_p3;
    sc_signal< sc_lv<50> > tmp_8_cast_fu_212_p1;
    sc_signal< sc_lv<50> > tmp_7_cast_fu_208_p1;
    sc_signal< sc_lv<24> > tmp_2_fu_239_p1;
    sc_signal< sc_lv<24> > p_Val2_3_fu_229_p4;
    sc_signal< sc_lv<1> > tmp_10_fu_242_p3;
    sc_signal< sc_lv<1> > tmp_3_fu_264_p2;
    sc_signal< sc_lv<1> > Range1_all_ones_fu_293_p2;
    sc_signal< sc_lv<1> > Range1_all_zeros_fu_298_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_286_p3;
    sc_signal< sc_lv<1> > tmp_4_fu_310_p2;
    sc_signal< sc_lv<1> > p_41_i_i_fu_316_p2;
    sc_signal< sc_lv<1> > deleted_zeros_fu_303_p3;
    sc_signal< sc_lv<1> > p_not_i_i_fu_333_p2;
    sc_signal< sc_lv<1> > brmerge_i_i_fu_339_p2;
    sc_signal< sc_lv<1> > deleted_ones_fu_321_p3;
    sc_signal< sc_lv<1> > tmp_demorgan_fu_360_p2;
    sc_signal< sc_lv<1> > tmp_fu_366_p2;
    sc_signal< sc_lv<1> > overflow_fu_349_p2;
    sc_signal< sc_lv<1> > tmp1_fu_383_p2;
    sc_signal< sc_lv<1> > underflow_not_fu_387_p2;
    sc_signal< sc_lv<24> > p_Val2_4_mux_fu_392_p3;
    sc_signal< sc_lv<24> > p_Val2_4_4_fu_398_p3;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_31;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<24> ap_const_lv24_7FFFFF;
    static const sc_lv<24> ap_const_lv24_800000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Range1_all_ones_fu_293_p2();
    void thread_Range1_all_zeros_fu_298_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_brmerge40_demorgan_i_fu_355_p2();
    void thread_brmerge_i_i_fu_339_p2();
    void thread_brmerge_i_i_i_fu_377_p2();
    void thread_carry_fu_270_p2();
    void thread_coeffs_address0();
    void thread_coeffs_ce0();
    void thread_deleted_ones_fu_321_p3();
    void thread_deleted_zeros_fu_303_p3();
    void thread_i_V_fu_167_p2();
    void thread_newsignbit_fu_256_p3();
    void thread_outData_V_ap_vld();
    void thread_overflow_fu_349_p2();
    void thread_p_38_i_i_fu_328_p2();
    void thread_p_41_i_i_fu_316_p2();
    void thread_p_Val2_2_fu_215_p2();
    void thread_p_Val2_3_fu_229_p4();
    void thread_p_Val2_4_4_fu_398_p3();
    void thread_p_Val2_4_fu_250_p2();
    void thread_p_Val2_4_mux_fu_392_p3();
    void thread_p_not_i_i_fu_333_p2();
    void thread_result_V_fu_404_p3();
    void thread_samples_V_address0();
    void thread_samples_V_address1();
    void thread_samples_V_ce0();
    void thread_samples_V_ce1();
    void thread_samples_V_d0();
    void thread_samples_V_d1();
    void thread_samples_V_we0();
    void thread_samples_V_we1();
    void thread_tmp1_fu_383_p2();
    void thread_tmp_10_fu_242_p3();
    void thread_tmp_12_fu_286_p3();
    void thread_tmp_2_fu_239_p1();
    void thread_tmp_3_fu_264_p2();
    void thread_tmp_4_fu_310_p2();
    void thread_tmp_5_fu_161_p2();
    void thread_tmp_6_fu_173_p1();
    void thread_tmp_7_cast_fu_208_p1();
    void thread_tmp_7_fu_200_p3();
    void thread_tmp_8_cast_fu_212_p1();
    void thread_tmp_demorgan_fu_360_p2();
    void thread_tmp_fu_366_p2();
    void thread_tmp_s_fu_344_p2();
    void thread_underflow_fu_372_p2();
    void thread_underflow_not_fu_387_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
