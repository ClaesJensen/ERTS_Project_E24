-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity biquadv2 is
generic (
    C_S_AXI_BIQUADV2_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_BIQUADV2_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_biquadv2_AWVALID : IN STD_LOGIC;
    s_axi_biquadv2_AWREADY : OUT STD_LOGIC;
    s_axi_biquadv2_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_ADDR_WIDTH-1 downto 0);
    s_axi_biquadv2_WVALID : IN STD_LOGIC;
    s_axi_biquadv2_WREADY : OUT STD_LOGIC;
    s_axi_biquadv2_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_DATA_WIDTH-1 downto 0);
    s_axi_biquadv2_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_DATA_WIDTH/8-1 downto 0);
    s_axi_biquadv2_ARVALID : IN STD_LOGIC;
    s_axi_biquadv2_ARREADY : OUT STD_LOGIC;
    s_axi_biquadv2_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_ADDR_WIDTH-1 downto 0);
    s_axi_biquadv2_RVALID : OUT STD_LOGIC;
    s_axi_biquadv2_RREADY : IN STD_LOGIC;
    s_axi_biquadv2_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BIQUADV2_DATA_WIDTH-1 downto 0);
    s_axi_biquadv2_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_biquadv2_BVALID : OUT STD_LOGIC;
    s_axi_biquadv2_BREADY : IN STD_LOGIC;
    s_axi_biquadv2_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of biquadv2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "biquadv2,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=38,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=759,HLS_SYN_LUT=606}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inData_V : STD_LOGIC_VECTOR (23 downto 0);
    signal outData_V_ap_vld : STD_LOGIC;
    signal coeffs_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal coeffs_ce0 : STD_LOGIC;
    signal coeffs_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal samples_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_V_ce0 : STD_LOGIC;
    signal samples_V_we0 : STD_LOGIC;
    signal samples_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal samples_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal samples_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_V_ce1 : STD_LOGIC;
    signal samples_V_we1 : STD_LOGIC;
    signal samples_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal samples_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal reg_155 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal inData_V_read_reg_412 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_V_fu_167_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_420 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_5_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal coeffs_load_reg_435 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_1_reg_450 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_8_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_215_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_2_reg_460 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal signbit_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_250_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_4_reg_472 : STD_LOGIC_VECTOR (23 downto 0);
    signal newsignbit_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_491 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_s_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_404_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Val2_s_reg_130 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_0_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_7_fu_200_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_cast_fu_212_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_7_cast_fu_208_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_2_fu_239_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_3_fu_229_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_demorgan_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_mux_fu_392_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_4_4_fu_398_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component biquadv2_mul_24s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component biquadv2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component biquadv2_samples_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component biquadv2_biquadv2_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inData_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        outData_V : IN STD_LOGIC_VECTOR (23 downto 0);
        outData_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    coeffs_U : component biquadv2_coeffs
    generic map (
        DataWidth => 26,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => coeffs_address0,
        ce0 => coeffs_ce0,
        q0 => coeffs_q0);

    samples_V_U : component biquadv2_samples_V
    generic map (
        DataWidth => 24,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => samples_V_address0,
        ce0 => samples_V_ce0,
        we0 => samples_V_we0,
        d0 => samples_V_d0,
        q0 => samples_V_q0,
        address1 => samples_V_address1,
        ce1 => samples_V_ce1,
        we1 => samples_V_we1,
        d1 => samples_V_d1,
        q1 => samples_V_q1);

    biquadv2_biquadv2_s_axi_U : component biquadv2_biquadv2_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BIQUADV2_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BIQUADV2_DATA_WIDTH)
    port map (
        AWVALID => s_axi_biquadv2_AWVALID,
        AWREADY => s_axi_biquadv2_AWREADY,
        AWADDR => s_axi_biquadv2_AWADDR,
        WVALID => s_axi_biquadv2_WVALID,
        WREADY => s_axi_biquadv2_WREADY,
        WDATA => s_axi_biquadv2_WDATA,
        WSTRB => s_axi_biquadv2_WSTRB,
        ARVALID => s_axi_biquadv2_ARVALID,
        ARREADY => s_axi_biquadv2_ARREADY,
        ARADDR => s_axi_biquadv2_ARADDR,
        RVALID => s_axi_biquadv2_RVALID,
        RREADY => s_axi_biquadv2_RREADY,
        RDATA => s_axi_biquadv2_RDATA,
        RRESP => s_axi_biquadv2_RRESP,
        BVALID => s_axi_biquadv2_BVALID,
        BREADY => s_axi_biquadv2_BREADY,
        BRESP => s_axi_biquadv2_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inData_V => inData_V,
        outData_V => p_Val2_s_reg_130,
        outData_V_ap_vld => outData_V_ap_vld);

    biquadv2_mul_24s_bkb_U0 : component biquadv2_mul_24s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 24,
        din1_WIDTH => 26,
        dout_WIDTH => 49)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_155,
        din1 => coeffs_load_reg_435,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0_reg_144 <= i_V_reg_420;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_144 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_Val2_s_reg_130 <= result_V_fu_404_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_s_reg_130 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_155 <= samples_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_155 <= samples_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                brmerge40_demorgan_i_reg_507 <= brmerge40_demorgan_i_fu_355_p2;
                brmerge_i_i_i_reg_517 <= brmerge_i_i_i_fu_377_p2;
                p_38_i_i_reg_497 <= p_38_i_i_fu_328_p2;
                tmp_s_reg_502 <= tmp_s_fu_344_p2;
                underflow_reg_512 <= underflow_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                carry_reg_484 <= carry_fu_270_p2;
                newsignbit_reg_478 <= p_Val2_4_fu_250_p2(23 downto 23);
                p_Val2_2_reg_460 <= p_Val2_2_fu_215_p2;
                p_Val2_4_reg_472 <= p_Val2_4_fu_250_p2;
                signbit_reg_465 <= p_Val2_2_fu_215_p2(49 downto 49);
                tmp_9_reg_491 <= p_Val2_2_fu_215_p2(49 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                coeffs_load_reg_435 <= coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_420 <= i_V_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                inData_V_read_reg_412 <= inData_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_Val2_1_reg_450 <= grp_fu_186_p2;
                tmp_8_reg_455 <= grp_fu_186_p2(23 downto 23);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_5_fu_161_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_5_fu_161_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_293_p2 <= "1" when (tmp_9_reg_491 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_298_p2 <= "1" when (tmp_9_reg_491 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge40_demorgan_i_fu_355_p2 <= (newsignbit_reg_478 and deleted_ones_fu_321_p3);
    brmerge_i_i_fu_339_p2 <= (newsignbit_reg_478 or p_not_i_i_fu_333_p2);
    brmerge_i_i_i_fu_377_p2 <= (underflow_fu_372_p2 or overflow_fu_349_p2);
    carry_fu_270_p2 <= (tmp_10_fu_242_p3 and tmp_3_fu_264_p2);
    coeffs_address0 <= tmp_6_fu_173_p1(3 - 1 downto 0);

    coeffs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            coeffs_ce0 <= ap_const_logic_1;
        else 
            coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_321_p3 <= 
        p_41_i_i_fu_316_p2 when (carry_reg_484(0) = '1') else 
        Range1_all_ones_fu_293_p2;
    deleted_zeros_fu_303_p3 <= 
        Range1_all_ones_fu_293_p2 when (carry_reg_484(0) = '1') else 
        Range1_all_zeros_fu_298_p2;
    i_V_fu_167_p2 <= std_logic_vector(unsigned(p_0_reg_144) + unsigned(ap_const_lv3_1));
    newsignbit_fu_256_p3 <= p_Val2_4_fu_250_p2(23 downto 23);

    outData_V_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outData_V_ap_vld <= ap_const_logic_1;
        else 
            outData_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_349_p2 <= (brmerge_i_i_fu_339_p2 and tmp_s_fu_344_p2);
    p_38_i_i_fu_328_p2 <= (carry_reg_484 and Range1_all_ones_fu_293_p2);
    p_41_i_i_fu_316_p2 <= (signbit_reg_465 and tmp_4_fu_310_p2);
    p_Val2_2_fu_215_p2 <= std_logic_vector(signed(tmp_8_cast_fu_212_p1) + signed(tmp_7_cast_fu_208_p1));
    p_Val2_3_fu_229_p4 <= p_Val2_2_fu_215_p2(47 downto 24);
    p_Val2_4_4_fu_398_p3 <= 
        ap_const_lv24_800000 when (underflow_reg_512(0) = '1') else 
        p_Val2_4_reg_472;
    p_Val2_4_fu_250_p2 <= std_logic_vector(unsigned(tmp_2_fu_239_p1) + unsigned(p_Val2_3_fu_229_p4));
    p_Val2_4_mux_fu_392_p3 <= 
        ap_const_lv24_7FFFFF when (brmerge_i_i_i_reg_517(0) = '1') else 
        p_Val2_4_reg_472;
    p_not_i_i_fu_333_p2 <= (deleted_zeros_fu_303_p3 xor ap_const_lv1_1);
    result_V_fu_404_p3 <= 
        p_Val2_4_mux_fu_392_p3 when (underflow_not_fu_387_p2(0) = '1') else 
        p_Val2_4_4_fu_398_p3;

    samples_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state2, tmp_5_fu_161_p2, tmp_6_fu_173_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_address0 <= ap_const_lv3_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_5_fu_161_p2 = ap_const_lv1_1)))) then 
            samples_V_address0 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_5_fu_161_p2 = ap_const_lv1_0))) then 
            samples_V_address0 <= tmp_6_fu_173_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            samples_V_address0 <= ap_const_lv3_0;
        else 
            samples_V_address0 <= "XXX";
        end if; 
    end process;


    samples_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_address1 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            samples_V_address1 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            samples_V_address1 <= ap_const_lv3_1;
        else 
            samples_V_address1 <= "XXX";
        end if; 
    end process;


    samples_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state2, tmp_5_fu_161_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_5_fu_161_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_5_fu_161_p2 = ap_const_lv1_1)))) then 
            samples_V_ce0 <= ap_const_logic_1;
        else 
            samples_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            samples_V_ce1 <= ap_const_logic_1;
        else 
            samples_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    samples_V_d0_assign_proc : process(ap_CS_fsm_state1, inData_V, ap_CS_fsm_state9, inData_V_read_reg_412, p_Val2_s_reg_130, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_d0 <= inData_V_read_reg_412;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            samples_V_d0 <= p_Val2_s_reg_130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            samples_V_d0 <= inData_V;
        else 
            samples_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    samples_V_d1_assign_proc : process(samples_V_q0, reg_155, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_d1 <= reg_155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            samples_V_d1 <= samples_V_q0;
        else 
            samples_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    samples_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            samples_V_we0 <= ap_const_logic_1;
        else 
            samples_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            samples_V_we1 <= ap_const_logic_1;
        else 
            samples_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_383_p2 <= (brmerge40_demorgan_i_reg_507 or tmp_s_reg_502);
    tmp_10_fu_242_p3 <= p_Val2_2_fu_215_p2(47 downto 47);
    tmp_12_fu_286_p3 <= p_Val2_2_reg_460(48 downto 48);
    tmp_2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_455),24));
    tmp_3_fu_264_p2 <= (newsignbit_fu_256_p3 xor ap_const_lv1_1);
    tmp_4_fu_310_p2 <= (tmp_12_fu_286_p3 xor ap_const_lv1_1);
    tmp_5_fu_161_p2 <= "1" when (p_0_reg_144 = ap_const_lv3_5) else "0";
    tmp_6_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_reg_144),32));
        tmp_7_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_200_p3),50));

    tmp_7_fu_200_p3 <= (p_Val2_s_reg_130 & ap_const_lv24_0);
        tmp_8_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_450),50));

    tmp_demorgan_fu_360_p2 <= (p_38_i_i_fu_328_p2 or brmerge40_demorgan_i_fu_355_p2);
    tmp_fu_366_p2 <= (tmp_demorgan_fu_360_p2 xor ap_const_lv1_1);
    tmp_s_fu_344_p2 <= (signbit_reg_465 xor ap_const_lv1_1);
    underflow_fu_372_p2 <= (signbit_reg_465 and tmp_fu_366_p2);
    underflow_not_fu_387_p2 <= (tmp1_fu_383_p2 or p_38_i_i_reg_497);
end behav;
