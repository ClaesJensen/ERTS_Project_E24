#include "biquadv2start.hpp"
#include <stdio.h>

#define TEST_SIZE 128
void biquadv2start(
	coeff_t b0_a0,
	coeff_t b1_a0,
	coeff_t b2_a0,
	coeff_t a1_a0,
	coeff_t a2_a0,
	inData_t inDataLeft,
	inData_t inDataRight,
	outData_t* outDataLeft,
	outData_t* outDataRight
);


int main() {
	bool testPassed = true;
	printf("Start\n");
	//coeff_t b0_a0 = 0.915815940509867;
	//coeff_t b1_a0 = -1.797414493434111;
	//coeff_t b2_a0 = 0.897108371734282;
	//coeff_t a1_a0 = -(-1.797414493434111);
	//coeff_t a2_a0 = -(0.812924312244149);

	coeff_t b0_a0;
	b0_a0.range() = ap_int<32>(15364841);
	coeff_t b1_a0;
	b1_a0.range() = ap_int<32>(-30155609);
	coeff_t b2_a0;
	b2_a0.range() = ap_int<32>(15050980);
	coeff_t a1_a0;
	a1_a0.range() = ap_int<32>(-(-30155609));
	coeff_t a2_a0;
	a2_a0.range() = ap_int<32>(-(13638606));

	printf("Coeffs float:\n");
	printf("b0_a0: %f | b1_a0: %f | b2_a0: %f | a1_a0: %f | a2_a0: %f\n", b0_a0.to_float(), b1_a0.to_float(), b2_a0.to_float(), a1_a0.to_float(), a2_a0.to_float());
	printf("Coeffs int:\n");
	printf("b0_a0: %i | b1_a0: %i | b2_a0: %i | a1_a0: %i | a2_a0: %i\n", b0_a0.to_int(), b1_a0.to_int(), b2_a0.to_int(), a1_a0.to_int(), a2_a0.to_int());


	inData_t input[TEST_SIZE] = {
		0.130526,0.258819,0.382683,0.500000,0.608761,0.707107,0.793353,0.866025,0.923880,0.965926,0.991445,1.000000,0.991445,0.965926,0.923880,0.866025,0.793353,0.707107,0.608761,0.500000,0.382683,0.258819,0.130526,0.000000,-0.130526,-0.258819,-0.382683,-0.500000,-0.608761,-0.707107,-0.793353,-0.866025,-0.923880,-0.965926,-0.991445,-1.000000,-0.991445,-0.965926,-0.923880,-0.866025,-0.793353,-0.707107,-0.608761,-0.500000,-0.382683,-0.258819,-0.130526,-0.000000,0.130526,0.258819,0.382683,0.500000,0.608761,0.707107,0.793353,0.866025,0.923880,0.965926,0.991445,1.000000,0.991445,0.965926,0.923880,0.866025,0.793353,0.707107,0.608761,0.500000,0.382683,0.258819,0.130526,0.000000,-0.130526,-0.258819,-0.382683,-0.500000,-0.608761,-0.707107,-0.793353,-0.866025,-0.923880,-0.965926,-0.991445,-1.000000,-0.991445,-0.965926,-0.923880,-0.866025,-0.793353,-0.707107,-0.608761,-0.500000,-0.382683,-0.258819,-0.130526,-0.000000,0.130526,0.258819,0.382683,0.500000,0.608761,0.707107,0.793353,0.866025,0.923880,0.965926,0.991445,1.000000,0.991445,0.965926,0.923880,0.866025,0.793353,0.707107,0.608761,0.500000,0.382683,0.258819,0.130526,0.000000,-0.130526,-0.258819,-0.382683,-0.500000,-0.608761,-0.707107,-0.793353,-0.866025,
	};

	outData_t expected[TEST_SIZE] = {
		0.119538,0.217280,0.295726,0.357166,0.403687,0.437181,0.459355,0.471743,0.475718,0.472505,0.463197,0.448765,0.430072,0.407887,0.382895,0.355704,0.326863,0.296861,0.266141,0.235102,0.204110,0.173493,0.143555,0.114570,0.086788,0.060437,0.035720,0.012816,-0.008116,-0.026944,-0.043558,-0.057875,-0.069837,-0.079412,-0.086597,-0.091413,-0.093910,-0.094165,-0.092280,-0.088381,-0.082621,-0.075170,-0.066220,-0.055980,-0.044674,-0.032533,-0.019800,-0.006722,0.006456,0.019490,0.032141,0.044184,0.055402,0.065600,0.074600,0.082245,0.088406,0.092977,0.095883,0.097077,0.096542,0.094291,0.090366,0.084840,0.077811,0.069403,0.059766,0.049067,0.037494,0.025248,0.012543,-0.000400,-0.013358,-0.026106,-0.038422,-0.050095,-0.060921,-0.070714,-0.079306,-0.086546,-0.092311,-0.096500,-0.099040,-0.099888,-0.099028,-0.096474,-0.092270,-0.086487,-0.079223,-0.070603,-0.060774,-0.049904,-0.038178,-0.025799,-0.012976,0.000070,0.013116,0.025939,0.038320,0.050046,0.060917,0.070746,0.079366,0.086629,0.092411,0.096612,0.099161,0.100014,0.099156,0.096602,0.092395,0.086608,0.079339,0.070713,0.060878,0.050001,0.038268,0.025881,0.013052,-0.000001,-0.013054,-0.025884,-0.038270,-0.050002,-0.060878,-0.070713,-0.079337,-0.086605
	};

	outData_t resultLeft[TEST_SIZE];
	outData_t resultRight[TEST_SIZE];

	//Processing
	for (int i = 0; i < TEST_SIZE; i++) {
		biquadv2start(b0_a0, b1_a0, b2_a0, a1_a0, a2_a0, input[i], input[i], &resultLeft[i], &resultRight[i]);
	}

	//Printing result
	for (int i = 0; i < TEST_SIZE; i++) {
		bool match = round(expected[i].to_float() * 100) == round(resultLeft[i].to_float() * 100);
		printf("%f | %f | %i\n", expected[i].to_float(), resultLeft[i].to_float(), match);

		if (!match) {
			testPassed = false;
		}
	}

	if (testPassed) {
		return 0;
	}
	else {
		return -1;
	}
}
