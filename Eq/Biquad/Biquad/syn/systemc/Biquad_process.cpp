// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Biquad_process.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Biquad_process::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Biquad_process::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> Biquad_process::ap_ST_fsm_state1 = "1";
const sc_lv<11> Biquad_process::ap_ST_fsm_state2 = "10";
const sc_lv<11> Biquad_process::ap_ST_fsm_state3 = "100";
const sc_lv<11> Biquad_process::ap_ST_fsm_state4 = "1000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state5 = "10000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state6 = "100000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> Biquad_process::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> Biquad_process::ap_const_lv32_5 = "101";
const sc_lv<32> Biquad_process::ap_const_lv32_9 = "1001";
const sc_lv<32> Biquad_process::ap_const_lv32_1 = "1";
const sc_lv<32> Biquad_process::ap_const_lv32_2 = "10";
const sc_lv<32> Biquad_process::ap_const_lv32_4 = "100";
const sc_lv<1> Biquad_process::ap_const_lv1_0 = "0";
const sc_lv<32> Biquad_process::ap_const_lv32_6 = "110";
const sc_lv<32> Biquad_process::ap_const_lv32_7 = "111";
const sc_lv<32> Biquad_process::ap_const_lv32_8 = "1000";
const sc_lv<32> Biquad_process::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Biquad_process::ap_const_lv32_3 = "11";
const sc_lv<3> Biquad_process::ap_const_lv3_0 = "000";
const sc_lv<1> Biquad_process::ap_const_lv1_1 = "1";
const sc_lv<32> Biquad_process::ap_const_lv32_A = "1010";
const sc_lv<3> Biquad_process::ap_const_lv3_5 = "101";
const sc_lv<3> Biquad_process::ap_const_lv3_1 = "1";
const sc_lv<32> Biquad_process::ap_const_lv32_18 = "11000";
const sc_lv<32> Biquad_process::ap_const_lv32_37 = "110111";
const bool Biquad_process::ap_const_boolean_1 = true;

Biquad_process::Biquad_process(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coeffs_U = new Biquad_process_cobkb("coeffs_U");
    coeffs_U->clk(ap_clk);
    coeffs_U->reset(ap_rst);
    coeffs_U->address0(coeffs_address0);
    coeffs_U->ce0(coeffs_ce0);
    coeffs_U->q0(coeffs_q0);
    samples_V_U = new Biquad_process_sacud("samples_V_U");
    samples_V_U->clk(ap_clk);
    samples_V_U->reset(ap_rst);
    samples_V_U->address0(samples_V_address0);
    samples_V_U->ce0(samples_V_ce0);
    samples_V_U->we0(samples_V_we0);
    samples_V_U->d0(samples_V_d0);
    samples_V_U->q0(samples_V_q0);
    samples_V_U->address1(samples_V_address1);
    samples_V_U->ce1(samples_V_ce1);
    samples_V_U->we1(samples_V_we1);
    samples_V_U->d1(samples_V_d1);
    samples_V_U->q1(samples_V_q1);
    Biquad_mul_25s_32dEe_U0 = new Biquad_mul_25s_32dEe<1,2,25,32,56>("Biquad_mul_25s_32dEe_U0");
    Biquad_mul_25s_32dEe_U0->clk(ap_clk);
    Biquad_mul_25s_32dEe_U0->reset(ap_rst);
    Biquad_mul_25s_32dEe_U0->din0(coeffs_load_reg_294);
    Biquad_mul_25s_32dEe_U0->din1(reg_193);
    Biquad_mul_25s_32dEe_U0->ce(ap_var_for_const0);
    Biquad_mul_25s_32dEe_U0->dout(grp_fu_224_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_coeffs_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_211_p1 );

    SC_METHOD(thread_coeffs_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond_fu_199_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( t_V_reg_182 );

    SC_METHOD(thread_i_V_fu_205_p2);
    sensitive << ( t_V_reg_182 );

    SC_METHOD(thread_outData);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( v_V_reg_168 );

    SC_METHOD(thread_outData_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_result_V_fu_240_p2);
    sensitive << ( phitmp_reg_309 );
    sensitive << ( v_V_reg_168 );

    SC_METHOD(thread_samples_V_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_199_p2 );
    sensitive << ( tmp_fu_211_p1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_address1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_199_p2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_ce1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_d0);
    sensitive << ( inData );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( val_V_reg_271 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( v_V_reg_168 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_d1);
    sensitive << ( samples_V_q0 );
    sensitive << ( reg_193 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_samples_V_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_fu_211_p1);
    sensitive << ( t_V_reg_182 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_199_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Biquad_process_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, inData, "(port)inData");
    sc_trace(mVcdFile, outData, "(port)outData");
    sc_trace(mVcdFile, outData_ap_vld, "(port)outData_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, coeffs_address0, "coeffs_address0");
    sc_trace(mVcdFile, coeffs_ce0, "coeffs_ce0");
    sc_trace(mVcdFile, coeffs_q0, "coeffs_q0");
    sc_trace(mVcdFile, samples_V_q0, "samples_V_q0");
    sc_trace(mVcdFile, reg_193, "reg_193");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, samples_V_q1, "samples_V_q1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, val_V_reg_271, "val_V_reg_271");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_V_fu_205_p2, "i_V_fu_205_p2");
    sc_trace(mVcdFile, i_V_reg_279, "i_V_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_199_p2, "exitcond_fu_199_p2");
    sc_trace(mVcdFile, coeffs_load_reg_294, "coeffs_load_reg_294");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, phitmp_reg_309, "phitmp_reg_309");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, result_V_fu_240_p2, "result_V_fu_240_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, samples_V_address0, "samples_V_address0");
    sc_trace(mVcdFile, samples_V_ce0, "samples_V_ce0");
    sc_trace(mVcdFile, samples_V_we0, "samples_V_we0");
    sc_trace(mVcdFile, samples_V_d0, "samples_V_d0");
    sc_trace(mVcdFile, samples_V_address1, "samples_V_address1");
    sc_trace(mVcdFile, samples_V_ce1, "samples_V_ce1");
    sc_trace(mVcdFile, samples_V_we1, "samples_V_we1");
    sc_trace(mVcdFile, samples_V_d1, "samples_V_d1");
    sc_trace(mVcdFile, v_V_reg_168, "v_V_reg_168");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, t_V_reg_182, "t_V_reg_182");
    sc_trace(mVcdFile, tmp_fu_211_p1, "tmp_fu_211_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_224_p2, "grp_fu_224_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Biquad_process::~Biquad_process() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete coeffs_U;
    delete samples_V_U;
    delete Biquad_mul_25s_32dEe_U0;
}

void Biquad_process::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Biquad_process::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        reg_193 = samples_V_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        reg_193 = samples_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        t_V_reg_182 = i_V_reg_279.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_V_reg_182 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        v_V_reg_168 = result_V_fu_240_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_V_reg_168 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        coeffs_load_reg_294 = coeffs_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_V_reg_279 = i_V_fu_205_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        phitmp_reg_309 = grp_fu_224_p2.read().range(55, 24);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        val_V_reg_271 = inData.read();
    }
}

void Biquad_process::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Biquad_process::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Biquad_process::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Biquad_process::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Biquad_process::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Biquad_process::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Biquad_process::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Biquad_process::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Biquad_process::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Biquad_process::thread_coeffs_address0() {
    coeffs_address0 =  (sc_lv<3>) (tmp_fu_211_p1.read());
}

void Biquad_process::thread_coeffs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        coeffs_ce0 = ap_const_logic_1;
    } else {
        coeffs_ce0 = ap_const_logic_0;
    }
}

void Biquad_process::thread_exitcond_fu_199_p2() {
    exitcond_fu_199_p2 = (!t_V_reg_182.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_182.read() == ap_const_lv3_5);
}

void Biquad_process::thread_i_V_fu_205_p2() {
    i_V_fu_205_p2 = (!t_V_reg_182.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(t_V_reg_182.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Biquad_process::thread_outData() {
    outData = v_V_reg_168.read();
}

void Biquad_process::thread_outData_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        outData_ap_vld = ap_const_logic_1;
    } else {
        outData_ap_vld = ap_const_logic_0;
    }
}

void Biquad_process::thread_result_V_fu_240_p2() {
    result_V_fu_240_p2 = (!phitmp_reg_309.read().is_01() || !v_V_reg_168.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phitmp_reg_309.read()) + sc_biguint<32>(v_V_reg_168.read()));
}

void Biquad_process::thread_samples_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        samples_V_address0 =  (sc_lv<3>) (ap_const_lv32_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(exitcond_fu_199_p2.read(), ap_const_lv1_1)))) {
        samples_V_address0 =  (sc_lv<3>) (ap_const_lv32_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_199_p2.read(), ap_const_lv1_0))) {
        samples_V_address0 =  (sc_lv<3>) (tmp_fu_211_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        samples_V_address0 =  (sc_lv<3>) (ap_const_lv32_0);
    } else {
        samples_V_address0 = "XXX";
    }
}

void Biquad_process::thread_samples_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        samples_V_address1 =  (sc_lv<3>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        samples_V_address1 =  (sc_lv<3>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        samples_V_address1 =  (sc_lv<3>) (ap_const_lv32_1);
    } else {
        samples_V_address1 = "XXX";
    }
}

void Biquad_process::thread_samples_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_199_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_199_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        samples_V_ce0 = ap_const_logic_1;
    } else {
        samples_V_ce0 = ap_const_logic_0;
    }
}

void Biquad_process::thread_samples_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        samples_V_ce1 = ap_const_logic_1;
    } else {
        samples_V_ce1 = ap_const_logic_0;
    }
}

void Biquad_process::thread_samples_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        samples_V_d0 = val_V_reg_271.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        samples_V_d0 = v_V_reg_168.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        samples_V_d0 = inData.read();
    } else {
        samples_V_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Biquad_process::thread_samples_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        samples_V_d1 = reg_193.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        samples_V_d1 = samples_V_q0.read();
    } else {
        samples_V_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Biquad_process::thread_samples_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        samples_V_we0 = ap_const_logic_1;
    } else {
        samples_V_we0 = ap_const_logic_0;
    }
}

void Biquad_process::thread_samples_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        samples_V_we1 = ap_const_logic_1;
    } else {
        samples_V_we1 = ap_const_logic_0;
    }
}

void Biquad_process::thread_tmp_fu_211_p1() {
    tmp_fu_211_p1 = esl_zext<32,3>(t_V_reg_182.read());
}

void Biquad_process::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond_fu_199_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

}

