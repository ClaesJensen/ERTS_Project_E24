// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Biquad_process_HH_
#define _Biquad_process_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Biquad_mul_25s_32dEe.h"
#include "Biquad_process_cobkb.h"
#include "Biquad_process_sacud.h"

namespace ap_rtl {

struct Biquad_process : public sc_module {
    // Port declarations 5
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > inData;
    sc_out< sc_lv<32> > outData;
    sc_out< sc_logic > outData_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Biquad_process(sc_module_name name);
    SC_HAS_PROCESS(Biquad_process);

    ~Biquad_process();

    sc_trace_file* mVcdFile;

    Biquad_process_cobkb* coeffs_U;
    Biquad_process_sacud* samples_V_U;
    Biquad_mul_25s_32dEe<1,2,25,32,56>* Biquad_mul_25s_32dEe_U0;
    sc_signal< sc_lv<3> > coeffs_address0;
    sc_signal< sc_logic > coeffs_ce0;
    sc_signal< sc_lv<25> > coeffs_q0;
    sc_signal< sc_lv<32> > samples_V_q0;
    sc_signal< sc_lv<32> > reg_193;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > samples_V_q1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > val_V_reg_271;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > i_V_fu_205_p2;
    sc_signal< sc_lv<3> > i_V_reg_279;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > exitcond_fu_199_p2;
    sc_signal< sc_lv<25> > coeffs_load_reg_294;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > phitmp_reg_309;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > result_V_fu_240_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<3> > samples_V_address0;
    sc_signal< sc_logic > samples_V_ce0;
    sc_signal< sc_logic > samples_V_we0;
    sc_signal< sc_lv<32> > samples_V_d0;
    sc_signal< sc_lv<3> > samples_V_address1;
    sc_signal< sc_logic > samples_V_ce1;
    sc_signal< sc_logic > samples_V_we1;
    sc_signal< sc_lv<32> > samples_V_d1;
    sc_signal< sc_lv<32> > v_V_reg_168;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > t_V_reg_182;
    sc_signal< sc_lv<32> > tmp_fu_211_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<56> > grp_fu_224_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_37;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_coeffs_address0();
    void thread_coeffs_ce0();
    void thread_exitcond_fu_199_p2();
    void thread_i_V_fu_205_p2();
    void thread_outData();
    void thread_outData_ap_vld();
    void thread_result_V_fu_240_p2();
    void thread_samples_V_address0();
    void thread_samples_V_address1();
    void thread_samples_V_ce0();
    void thread_samples_V_ce1();
    void thread_samples_V_d0();
    void thread_samples_V_d1();
    void thread_samples_V_we0();
    void thread_samples_V_we1();
    void thread_tmp_fu_211_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
