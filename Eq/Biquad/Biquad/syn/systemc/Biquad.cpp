// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Biquad.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Biquad::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> Biquad::ap_const_lv32_1 = "1";
const sc_lv<2> Biquad::ap_const_lv2_0 = "00";
const sc_logic Biquad::ap_const_logic_0 = sc_dt::Log_0;
const bool Biquad::ap_const_boolean_1 = true;

Biquad::Biquad(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Biquad_process_fu_58 = new Biquad_process("grp_Biquad_process_fu_58");
    grp_Biquad_process_fu_58->ap_clk(inClk);
    grp_Biquad_process_fu_58->ap_rst(inReset);
    grp_Biquad_process_fu_58->inData(inData);
    grp_Biquad_process_fu_58->outData(grp_Biquad_process_fu_58_outData);
    grp_Biquad_process_fu_58->outData_ap_vld(grp_Biquad_process_fu_58_outData_ap_vld);

    SC_METHOD(thread_outData);
    dont_initialize();
    sensitive << ( inClk.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( inClk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Biquad_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, inClk, "(port)inClk");
    sc_trace(mVcdFile, inReset, "(port)inReset");
    sc_trace(mVcdFile, inData, "(port)inData");
    sc_trace(mVcdFile, outData, "(port)outData");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_Biquad_process_fu_58_outData, "grp_Biquad_process_fu_58_outData");
    sc_trace(mVcdFile, grp_Biquad_process_fu_58_outData_ap_vld, "grp_Biquad_process_fu_58_outData_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
    mHdltvinHandle.open("Biquad.hdltvin.dat");
    mHdltvoutHandle.open("Biquad.hdltvout.dat");
}

Biquad::~Biquad() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_Biquad_process_fu_58;
}

void Biquad::thread_outData() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Biquad_process_fu_58_outData_ap_vld.read())) {
        outData = grp_Biquad_process_fu_58_outData.read();
    }
}

void Biquad::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void Biquad::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Biquad::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"inReset\" :  \"" << inReset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inData\" :  \"" << inData.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"outData\" :  \"" << outData.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

