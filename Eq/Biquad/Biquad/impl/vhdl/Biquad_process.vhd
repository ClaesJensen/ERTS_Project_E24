-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Biquad_process is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inData : IN STD_LOGIC_VECTOR (31 downto 0);
    outData : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Biquad_process is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal coeffs_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal coeffs_ce0 : STD_LOGIC;
    signal coeffs_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal samples_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal samples_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal val_V_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_V_fu_205_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal coeffs_load_reg_294 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal phitmp_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal result_V_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal samples_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_V_ce0 : STD_LOGIC;
    signal samples_V_we0 : STD_LOGIC;
    signal samples_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_V_ce1 : STD_LOGIC;
    signal samples_V_we1 : STD_LOGIC;
    signal samples_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_V_reg_182 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component Biquad_mul_25s_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component Biquad_process_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Biquad_process_sacud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    coeffs_U : component Biquad_process_cobkb
    generic map (
        DataWidth => 25,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeffs_address0,
        ce0 => coeffs_ce0,
        q0 => coeffs_q0);

    samples_V_U : component Biquad_process_sacud
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_V_address0,
        ce0 => samples_V_ce0,
        we0 => samples_V_we0,
        d0 => samples_V_d0,
        q0 => samples_V_q0,
        address1 => samples_V_address1,
        ce1 => samples_V_ce1,
        we1 => samples_V_we1,
        d1 => samples_V_d1,
        q1 => samples_V_q1);

    Biquad_mul_25s_32dEe_U0 : component Biquad_mul_25s_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coeffs_load_reg_294,
        din1 => reg_193,
        ce => ap_const_logic_1,
        dout => grp_fu_224_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_193 <= samples_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_193 <= samples_V_q0;
            end if; 
        end if;
    end process;

    t_V_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_reg_182 <= i_V_reg_279;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_reg_182 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    v_V_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                v_V_reg_168 <= result_V_fu_240_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                v_V_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                coeffs_load_reg_294 <= coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_V_reg_279 <= i_V_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                phitmp_reg_309 <= grp_fu_224_p2(55 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                val_V_reg_271 <= inData;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state5, exitcond_fu_199_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_199_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    coeffs_address0 <= tmp_fu_211_p1(3 - 1 downto 0);

    coeffs_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            coeffs_ce0 <= ap_const_logic_1;
        else 
            coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_199_p2 <= "1" when (t_V_reg_182 = ap_const_lv3_5) else "0";
    i_V_fu_205_p2 <= std_logic_vector(unsigned(t_V_reg_182) + unsigned(ap_const_lv3_1));
    outData <= v_V_reg_168;

    outData_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outData_ap_vld <= ap_const_logic_1;
        else 
            outData_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_V_fu_240_p2 <= std_logic_vector(unsigned(phitmp_reg_309) + unsigned(v_V_reg_168));

    samples_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond_fu_199_p2, tmp_fu_211_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            samples_V_address0 <= ap_const_lv32_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_199_p2 = ap_const_lv1_1)))) then 
            samples_V_address0 <= ap_const_lv32_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_199_p2 = ap_const_lv1_0))) then 
            samples_V_address0 <= tmp_fu_211_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            samples_V_address0 <= ap_const_lv32_0(3 - 1 downto 0);
        else 
            samples_V_address0 <= "XXX";
        end if; 
    end process;


    samples_V_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            samples_V_address1 <= ap_const_lv32_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_address1 <= ap_const_lv32_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_V_address1 <= ap_const_lv32_1(3 - 1 downto 0);
        else 
            samples_V_address1 <= "XXX";
        end if; 
    end process;


    samples_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond_fu_199_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_199_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_199_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            samples_V_ce0 <= ap_const_logic_1;
        else 
            samples_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            samples_V_ce1 <= ap_const_logic_1;
        else 
            samples_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    samples_V_d0_assign_proc : process(inData, ap_CS_fsm_state10, val_V_reg_271, ap_CS_fsm_state3, v_V_reg_168, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            samples_V_d0 <= val_V_reg_271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_d0 <= v_V_reg_168;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            samples_V_d0 <= inData;
        else 
            samples_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    samples_V_d1_assign_proc : process(samples_V_q0, reg_193, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            samples_V_d1 <= reg_193;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            samples_V_d1 <= samples_V_q0;
        else 
            samples_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    samples_V_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            samples_V_we0 <= ap_const_logic_1;
        else 
            samples_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_V_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            samples_V_we1 <= ap_const_logic_1;
        else 
            samples_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_182),32));
end behav;
